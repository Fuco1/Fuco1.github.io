<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
	 xmlns:content="http://purl.org/rss/1.0/modules/content/"
	 xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	 xmlns:dc="http://purl.org/dc/elements/1.1/"
	 xmlns:atom="http://www.w3.org/2005/Atom"
	 xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	 xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	 xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Matus Goljer (Fuco1)</title>
  <atom:link href="https://fuco1.github.io/rss.xml" rel="self" type="application/rss+xml" />
  <link>https://fuco1.github.io/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Mon, 20 Feb 2023 20:18:55 +0100</pubDate>
  <lastBuildDate>Mon, 20 Feb 2023 20:18:55 +0100</lastBuildDate>
  <generator>Emacs 28.2 Org-mode 9.6.1</generator>
  <webMaster>matus.goljer@gmail.com (Matúš Goljer)</webMaster>
  <image>
    <url>https://orgmode.org/img/org-mode-unicorn-logo.png</url>
    <title>Matus Goljer (Fuco1)</title>
    <link>https://fuco1.github.io/</link>
  </image>

  <item>
    <title>Using OpenAI GPT to search your org files</title>
    <link>https://fuco1.github.io/2023-02-20-Using-OpenAI-GPT-to-search-your-org-files.html</link>
    <author>matus.goljer@gmail.com (Matúš Goljer)</author>
    <guid isPermaLink="false">https://fuco1.github.io/2023-02-20-Using-OpenAI-GPT-to-search-your-org-files.html</guid>
    <pubDate>Mon, 20 Feb 2023 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    As I wrote <a href="./2023-02-08-Visit-the-org-headline-from-the-attach-dired-buffer.html#org2e7b192">previously</a>, I store all my files under <code>~/data/org-attach</code> by
    using the org mode file attachment feature.  To retrieve a file, I
    usually use agenda search or other org packages which can go over your
    org files and retrieve a headline.
    </p>

    <p>
    But what for those rare moments when I only have a vague idea of what
    I'm looking for and can't hit the query exactly?  Well... we can use a
    semantic search.
    </p>

    <p>
    OpenAI recently opened a Large Language Model Embedding API.  Roughly
    speaking, embedding takes a chunk of text and returns a fixed sized
    vector in the model's "knowledge space" (OpenAI's ada model returns
    1536 dimensional vector).  Two vectors which are close to each other
    in this knowledge space should correspond to similar things.
    </p>

    <p>
    The usual metric of judging closeness of vectors is the "angle"
    between them.  This is hard to imagine in 1536 dimensions, but to keep
    it short we can use the <a href="https://en.wikipedia.org/wiki/Dot_product">dot product</a> operation to compute the
    "similarity".
    </p>

    <p>
    So the idea here is simple:
    </p>

    <ol class="org-ol">
    <li>Iterate over all headlines in my buffers.</li>
    <li>Submit them to the Embedding API and cache the embedding vectors for each headline.</li>
    <li>When querying for a headline, submit the query to the API, then
    calculate similarity with all the cached embeddings and present the
    closest ones as candidates.<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup></li>
    </ol>

    <p>
    I wrote my own "org brain" clone which I called <a href="https://github.com/Fuco1/org-node-graph">org-graph</a> because I
    wasn't happy with any available solution.  My biggest problem was that
    most systems either prescribed one file per note, or only worked with
    top level headlines, or had other artificial limitations.  So it was
    logical this feature would live in that package as well.
    </p>

    <p>
    But just after I got ready with all the preprocessing and data
    preparation and API implementation, there came a shock.  Emacs math is
    SLOOOOOOW.  So slow this "dot product" operation was taking ages and
    the interface sucked.
    </p>

    <p>
    But then I remembered about <a href="https://phst.eu/emacs-modules">dynamic modules</a>.  Not wanting to give up,
    I decided to write a C module for some good old linear algebra.
    </p>

    <p>
    You start with a header and some initialization:
    </p>

    <div class="org-src-container">
    <pre class="src src-c"><span style="color: #ad7fa8;">#include</span> <span style="color: #e9b96e;">&lt;emacs-module.h&gt;</span>

    <span style="color: #8cc4ff;">int</span> <span style="color: #fcaf3e;">plugin_is_GPL_compatible</span>;

    <span style="color: #8cc4ff;">int</span>
    <span style="color: #fce94f;">emacs_module_init</span> (<span style="color: #b4fa70;">struct</span> <span style="color: #8cc4ff;">emacs_runtime</span> *<span style="color: #fcaf3e;">runtime</span>)
    {
    <span style="color: #8cc4ff;">emacs_env</span> *<span style="color: #fcaf3e;">env</span> = runtime-&gt;get_environment (runtime);

    <span style="color: #b4fa70;">return</span> 0;
    }
    </pre>
    </div>

    <p>
    Then you can start implementing the functions.  I'm not going to
    repeat everything here, you can find the full C source at <a href="https://github.com/Fuco1/org-node-graph/blob/master/dotproduct.c">GitHub</a>.  The
    following function computes the dot product, which is really just a
    lot of multiplication and addition.
    </p>

    <div class="org-src-container">
    <pre class="src src-c"><span style="color: #b4fa70;">static</span> <span style="color: #8cc4ff;">emacs_value</span>
    <span style="color: #fce94f;">dot_product</span> (<span style="color: #8cc4ff;">emacs_env</span> *<span style="color: #fcaf3e;">env</span>, <span style="color: #8cc4ff;">ptrdiff_t</span> <span style="color: #fcaf3e;">nargs</span>, <span style="color: #8cc4ff;">emacs_value</span> *<span style="color: #fcaf3e;">args</span>,
    <span style="color: #8cc4ff;">void</span> *<span style="color: #fcaf3e;">data</span>)
    {
    assert (nargs == 2);
    <span style="color: #8cc4ff;">emacs_value</span> <span style="color: #fcaf3e;">a</span> = args[0];
    <span style="color: #8cc4ff;">emacs_value</span> <span style="color: #fcaf3e;">b</span> = args[1];

    <span style="color: #8cc4ff;">ptrdiff_t</span> <span style="color: #fcaf3e;">size</span> = env-&gt;vec_size (env, a);

    <span style="color: #8cc4ff;">double</span> <span style="color: #fcaf3e;">dp</span> = 0;
    <span style="color: #b4fa70;">for</span> (<span style="color: #8cc4ff;">int</span> <span style="color: #fcaf3e;">i</span> = 0; i &lt; size; i++) {
    <span style="color: #8cc4ff;">double</span> <span style="color: #fcaf3e;">first</span> = get_at(env, a, i);
    <span style="color: #8cc4ff;">double</span> <span style="color: #fcaf3e;">second</span> = get_at(env, b, i);
    dp += first * second;
    }

    <span style="color: #8cc4ff;">emacs_value</span> <span style="color: #fcaf3e;">result</span> = env-&gt;make_float (env, dp);
    <span style="color: #b4fa70;">return</span> result;
    }
    </pre>
    </div>

    <p>
    With a simple Makefile
    </p>

    <div class="org-src-container">
    <pre class="src src-makefile"><span style="color: #fce94f;">.PHONY</span>: all

    <span style="color: #fce94f;">all</span>: dotproduct.so

    <span style="color: #fce94f;">dotproduct.o</span>: dotproduct.c
    gcc -Wall -c dotproduct.c

    <span style="color: #fce94f;">dotproduct.so</span>: dotproduct.o
    gcc -shared -o dotproduct.so dotproduct.o
    </pre>
    </div>

    <p>
    we can build the module
    </p>

    <div class="org-src-container">
    <pre class="src src-bash">&gt; make
    gcc -Wall -c dotproduct.c
    gcc -shared -o dotproduct.so dotproduct.o
    </pre>
    </div>

    <p>
    Finally, we load the module into Emacs with:
    </p>

    <div class="org-src-container">
    <pre class="src src-elisp"><span style="color: #888a85;">(</span>module-load <span style="color: #888a85;">(</span>expand-file-name <span style="color: #e9b96e;">"dotproduct.so"</span><span style="color: #888a85;">))</span>
    </pre>
    </div>

    <p>
    Armed with the now much faster math routines, I embedded about 2000
    headers and now I can search my files by just giving very vague
    queries---it works surprisingly well, even across multiple different
    natural languages (i.e. if I ask about Franz Kafka's Castle it will
    return "Das Schloß" entry from my foreign language reading file).
    </p>

    <div class="org-src-container">
    <pre class="src src-elisp"><span style="color: #888a85;">(</span>org-graph-openai-query <span style="color: #e9b96e;">"Book about journey to the center of the Earth"</span><span style="color: #888a85;">)</span>
    </pre>
    </div>

    <p>
    The top 10 results.  You can see it mixes the languages but all the
    things are somewhat related.  However, it got the first hit exactly
    right.
    </p>

    <pre class="example" id="org0459edd">
    [8de3805f-8971-404a-98d2-84305db1a444] 87.43 Voyage au centre de la Terre
    [f128f559-74a6-4435-a357-aa7d35976097] 85.43 Nicolai Klimii Iter Subterraneum
    [2e0f3f7a-73bd-4b0f-a588-c757432607ca] 85.26 Endurance: Shackleton's Incredible Voyage
    [d2828ffb-343c-431f-8657-521ef32de079] 85.11 Vesmír v orechovej škrupinke
    [724b7e0d-f804-4d1d-8767-c4d166492472] 84.83 Oheň nad hlubinou - Pád Straumli
    [5e2b17a4-902a-4e55-87f3-25a18f239346] 84.78 The Earthsea
    [5e5906eb-7ab6-4b86-b41f-2bd007ff8eba] 84.65 Tolkien: Sur les rivages de la Terre du Milieu
    [c33a670e-8ec2-4886-9e12-eee71891d2ea] 84.21 Vladimir Ulrich - Bis ans Ende der Welt - Ein Pilgerbuch
    [d3c57fb4-9458-487d-bcf7-9852b9fec3cf] 84.09 The Lost World
    [5d0d82de-df40-43f7-9868-3470d1bd376d] 83.95 Oheň nad hlubinou - Planeta spárů
    </pre>

    <p>
    Here's another example which is purposefully silly description of the
    <a href="https://en.wikipedia.org/wiki/Thus_Spoke_Zarathustra">expected</a> book's title:
    </p>

    <div class="org-src-container">
    <pre class="src src-elisp"><span style="color: #888a85;">(</span>org-graph-openai-query <span style="color: #e9b96e;">"Philosophical book where someone spoke in a particular way"</span><span style="color: #888a85;">)</span>
    </pre>
    </div>

    <p>
    The top 10 results from my org files are:
    </p>

    <pre class="example" id="org406d308">
    [5d59a53e-fb81-4927-bce2-5096d9fb8417] 88.69 Thus Spoke Zarathustra
    [15e61234-4d6b-413c-986d-391996f09a19] 87.82 Quotes
    [7922112d-e871-419f-a4f2-68e892d5dad1] 87.04 Epistemology
    [82e38b44-5ce1-416f-bd19-075aa70c7bf6] 86.96 Western Philosophy
    [babcdf60-5840-4772-ba2b-314faa756997] 86.94 Nietzsche
    [b192f472-d4f6-4596-8520-627b2c77e783] 86.90 Treatise on Human Nature
    [b6f1d479-53fb-4e88-a474-024fbafab99e] 86.75 The Short History of Modern Philosophy
    [1a366e71-eb03-472b-8c7c-d619494e9693] 86.62 The way of the bow
    [2d738ef8-4a23-4b32-bcc1-0a1cc941c4be] 86.55 The Discourses
    [2f00f564-af67-4d04-bf41-8cabe7764cdb] 86.36 The Life of Reason - Santayana
    </pre>

    <p>
    Not bad, eh :)
    </p>

    <p>
    To prepare the embeddings, you can run the function
    <code>org-graph-compute-embeddings-for-buffer</code> in an org buffer.  Make sure
    to set the environment variable <code>OPENAI_TOKEN</code>.  Also be aware that this
    will add the <code>ID</code> property to every headline as this is a way to track
    the cached embedding to the particular headline.  Make sure to backup
    your org files before running this (you have them checked in to git
    right... right?!).  This will fire several requests to the API (about
    20 headings per request), so be patient, it should take about a minute
    for 500-600 headings.
    </p>

    <p>
    You can discuss and ask questions on the <a href="https://github.com/Fuco1/Fuco1.github.io/discussions">discussions board on GitHub</a>.
    </p>

    <p>
    This blog post was inspired by <a href="https://reasonabledeviations.com/2023/02/05/gpt-for-second-brain/">GPT for second brains</a>.
    </p>
    ]]></description>
</item>

<item>
  <title>Refiling hydra with pre-defined targets</title>
  <link>https://fuco1.github.io/2019-02-10-Refiling-hydra-with-pre-defined-targets.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2019-02-10-Refiling-hydra-with-pre-defined-targets.html</guid>
  <pubDate>Sun, 10 Feb 2019 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  I'm a heavy <code>org-capture</code> user and I use about 10 templates to save the
  ideas/tasks to appropriate places (work / life / emacs / other
  projects / reading...).  Sometimes, however, it is quite difficult to
  determine at the time of capture where to put the note, or it would
  take a lot of time to categorize properly... or sometimes I'm just
  lazy.  For these situations I use a general <code>refile.org</code> file.  Anything
  I don't want to deal with right now goes there.
  </p>

  <p>
  Then I often end up with 200+ notes in this file and I have to deal
  with it somehow during my weekly reviews.  Many items I simply delete,
  but some I refine and then refile away to where they belong.
  </p>

  <p>
  I use about 10 huge org files to store my data and simply calling
  <code>org-refile</code> is very slow and the number of targets grows into tens of
  thousands which makes the experience sub-optimal.
  </p>

  <p>
  I've written a simple Elisp <code>defmacro</code> to generate specialized versions
  of <code>org-refile</code> where I can limit the targets to one file or a subset of
  files.  This is done by <code>let</code>-binding <code>org-refine-targets</code> variable and
  then calling <code>org-refile</code>---it will pick up the new setting.  I also
  automatically clear the cache because during this process I often add
  or move headlines around and the cache is most of the time stale.  In
  practice it's not a problem because refiling to just one file is
  fast-enough to rebuild the cache on-the-go.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defmacro</span> <span style="color: #fce94f;">my-org-make-refile-command</span> <span style="color: #888a85;">(</span>fn-suffix refile-targets<span style="color: #888a85;">)</span>
  <span style="color: #e9b96e;">"Generate a command to call `</span><span style="color: #e6a8df;">org-refile</span><span style="color: #e9b96e;">' with modified targets."</span>
  `<span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> ,<span style="color: #888a85;">(</span>intern <span style="color: #888a85;">(</span>concat <span style="color: #e9b96e;">"my-org-refile-"</span> <span style="color: #888a85;">(</span>symbol-name fn-suffix<span style="color: #888a85;">)))</span> <span style="color: #888a85;">()</span>
  ,<span style="color: #888a85;">(</span>format <span style="color: #e9b96e;">"`</span><span style="color: #e6a8df;">org-refile</span><span style="color: #e9b96e;">' to %S"</span> refile-targets<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">interactive</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-refile-cache-clear<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>org-refile-target-verify-function nil<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-refile-targets ,refile-targets<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>call-interactively <span style="color: #e6a8df;">'org-refile</span><span style="color: #888a85;">))))</span>
  </pre>
  </div>

  <p>
  It's quite straight-forward, we have a <code>defun</code> skeleton and we splice
  the name and the target there.  The expansion looks like this
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">my-org-make-refile-command</span> kb '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"~/data/documents/kb.org"</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">)))</span>

  <span style="color: #73d216;">;; </span><span style="color: #73d216;">expands to</span>

  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-org-refile-kb</span> nil
  <span style="color: #e9b96e;">"`</span><span style="color: #e6a8df;">org-refile</span><span style="color: #e9b96e;">' to (quote ((\"~/data/documents/kb.org\" :maxlevel . 9)))"</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">interactive</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-refile-cache-clear<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span>
  <span style="color: #888a85;">((</span>org-refile-target-verify-function nil<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-refile-targets
  '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"~/data/documents/kb.org"</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">))))</span>
  <span style="color: #888a85;">(</span>call-interactively <span style="color: #e6a8df;">'org-refile</span><span style="color: #888a85;">)))</span>
  </pre>
  </div>

  <p>
  Throw in a cool <a href="https://github.com/abo-abo/hydra">hydra</a> and you're all set!
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">my-org-make-refile-command</span> kb '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"~/data/documents/kb.org"</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">my-org-make-refile-command</span> reading '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"~/org/reading.org"</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">my-org-make-refile-command</span> this-file `<span style="color: #888a85;">((</span>,<span style="color: #888a85;">(</span>buffer-file-name<span style="color: #888a85;">)</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">)))</span>

  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">defhydra</span> <span style="color: #8cc4ff;">my-org-refile-hydra</span> <span style="color: #888a85;">(</span><span style="color: #ad7fa8;">:color</span> blue <span style="color: #ad7fa8;">:hint</span> nil<span style="color: #888a85;">)</span>
  <span style="color: #e9b96e;">"</span>
  <span style="color: #e9b96e;">_t_his file</span>

  <span style="color: #e9b96e;">Special files:</span>
  <span style="color: #e9b96e;">---------------------</span>
  <span style="color: #e9b96e;">_k_b.org    _r_eading.org"</span>
  <span style="color: #888a85;">(</span><span style="color: #e9b96e;">"k"</span> my-org-refile-kb<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #e9b96e;">"r"</span> my-org-refile-reading<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #e9b96e;">"t"</span> my-org-refile-this-file<span style="color: #888a85;">))</span>

  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">bind-key</span> <span style="color: #e9b96e;">"C-c r"</span> <span style="color: #8cc4ff;">#'my-org-refile-hydra/body</span> org-mode-map<span style="color: #888a85;">)</span>
  </pre>
  </div>
  ]]></description>
</item>

<item>
  <title>The absolute awesomeness of anchored font-lock matchers</title>
  <link>https://fuco1.github.io/2017-06-01-The-absolute-awesomeness-of-anchored-font-lock-matchers.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2017-06-01-The-absolute-awesomeness-of-anchored-font-lock-matchers.html</guid>
  <pubDate>Thu, 01 Jun 2017 00:00:00 +0200</pubDate>

  <description><![CDATA[<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


  <colgroup>
  <col  class="org-right" />

  <col  class="org-left" />
  </colgroup>
  <thead>
  <tr>
  <th scope="col" class="org-right">Date</th>
  <th scope="col" class="org-left">Change</th>
  </tr>
  </thead>
  <tbody>
  <tr>
  <td class="org-right">2017-07-03</td>
  <td class="org-left">The font-lock spec annotations were updated to better reflect the looping nature of the matcher</td>
  </tr>
  </tbody>
  </table>

  <p>
  People who know my rants on Emacs and especially <code>font-lock-mode</code> know that I consider it a rather crappy hack.  Parsing complex context sensitive languages with a bunch of very weak regexes<sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup> just screams <i>This is a really bad idea!</i>  Well, either way I was always forced to admit that yes, it is a hack, but damn does it work in practice!  Very rarely there is some problem you can't solve, and if the need comes, you can actually use arbitrary elisp code as the matcher so long as it sets <code>match-data</code> the same way <code>re-search-forward</code> would.
  </p>

  <p>
  Today I had a problem I thought would finally prove my point about how bad font-lock is and that we should all bike-shed and invent totally awesome <a href="https://eclipse.org/Xtext/">formal parsers</a>... then I went back to the docstring and of course Emacs can actually solve the problem.
  </p>

  <p>
  The issue is the following:  I'm writing a DSL which looks kind of like Haskell types, but written in sexps.  So where in Haskell one writes
  </p>

  <div class="org-src-container">
  <pre class="src src-haskell"><span style="color: #fce94f;">function</span> <span style="color: #fcaf3e;">::</span> <span style="color: #8cc4ff;">Int</span> <span style="color: #fcaf3e;">-&gt;</span> <span style="color: #8cc4ff;">String</span> <span style="color: #fcaf3e;">-&gt;</span> (<span style="color: #8cc4ff;">String</span> <span style="color: #fcaf3e;">-&gt;</span> <span style="color: #8cc4ff;">Int</span>) <span style="color: #fcaf3e;">-&gt;</span> [<span style="color: #8cc4ff;">Float</span>]
  </pre>
  </div>

  <p>
  in my DSL it would look something like
  </p>

  <pre class="example" id="org75c1efd">
  (type function :: int -&gt; string -&gt; (string -&gt; int) -&gt; [float])
  </pre>

  <p>
  Now, how would I fontify those <code>string</code> and <code>int</code> occurrences <i>only</i> when they occur inside the <code>type</code> form?  Turns out font lock supports <i>Anchored matchers</i>.
  </p>

  <p>
  The anchored matchers work by first searching for an <i>anchor</i> and only then searching for the thing you want to highlight.  This basically allows you to do look-ahead context-sensitive fontification in the sense that the subsequent matchers are <i>tried</i> but if they fail the process continues <b>from where the anchor match ended</b>.<sup><a id="fnr.3" class="footref" href="#fn.3" role="doc-backlink">3</a></sup>.
  </p>

  <p>
  For the longest time I struggled to understand how the font-lock specifications worked because there is so many different ways to write them.  What actually helped me to understand this once and for all was to simply look into the source code and read how it works.  I remembered the recent post by <a href="http://irreal.org/blog/?p=6209">Irreal</a> on reading source code.  It really is an effective way to learn, especially with software like Emacs being absolutely transparent about everything that is going on inside.
  </p>

  <p>
  A font lock rule starts with a matcher followed by one or more <code>HIGHLIGHT</code> forms.  A <code>HIGHLIGHT</code> form either specifies how to fontify group matched by the matcher or is actually <i>another matcher</i> (this is the anchored matcher).  The highlight forms are tried in order and applied one after another, whatever their type is.
  </p>

  <p>
  The specification is not completely recursive because it only allows one level of nesting, so an anchored matcher can not have other anchored matchers inside it.  The anchored matcher has the following syntax:
  </p>

  <pre class="example" id="orgdd31aba">
  (MATCHER PRE-MATCH-FORM POST-MATCH-FORM MATCH-HIGHLIGHT ...)
  </pre>

  <p>
  where <code>MATCHER</code> is the search regexp that is tried after the anchor was found, <code>PRE-MATCH-FORM</code> and <code>POST-MATCH-FORM</code> are executed before and after the <code>MATCHER</code> is run so you can set search limits and do other magic if necessary.  <code>MATCH-HIGHLIGHT</code> are the usual forms with the groups and faces.
  </p>

  <p>
  The cool and crucial ingredient is that the <code>MATCHER</code> is run in a cycle until the point goes after the limit.  This means that we in a sense "fontify" the region from the anchor to the limit we provide (or end of line by default).  We can then reset the position in the <code>POST-MATCH-FORM</code> so the next <code>HIGHLIGHT</code> (anchored matcher) will start from the beginning of the same "region" again.  This allows us to define "region specific" font-locking.  So cool!
  </p>

  <p>
  The final annotated rule looks as follows:
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span>font-lock-add-keywords
  nil
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">the first regexp is the anchor of the fontification, meaning the</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">"starting point" of the region</span>
  '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"(</span><span style="color: #e9b96e; font-weight: bold;">\\</span><span style="color: #e9b96e; font-weight: bold;">(</span><span style="color: #e9b96e;">type</span><span style="color: #e9b96e; font-weight: bold;">\\</span><span style="color: #e9b96e; font-weight: bold;">)</span><span style="color: #e9b96e;"> +</span><span style="color: #e9b96e; font-weight: bold;">\\</span><span style="color: #e9b96e; font-weight: bold;">(</span><span style="color: #e9b96e; font-weight: bold;">\\</span><span style="color: #e9b96e; font-weight: bold;">(?:</span><span style="color: #e9b96e;">\\sw</span><span style="color: #e9b96e; font-weight: bold;">\\</span><span style="color: #e9b96e; font-weight: bold;">|</span><span style="color: #e9b96e;">\\s_</span><span style="color: #e9b96e; font-weight: bold;">\\</span><span style="color: #e9b96e; font-weight: bold;">)</span><span style="color: #e9b96e;">+</span><span style="color: #e9b96e; font-weight: bold;">\\</span><span style="color: #e9b96e; font-weight: bold;">)</span><span style="color: #e9b96e;"> +::"</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">fontify the `</span><span style="color: #e6a8df;">type</span><span style="color: #73d216;">' as keyword</span>
  <span style="color: #888a85;">(</span>1 font-lock-keyword-face<span style="color: #888a85;">)</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">fontify the function name as function</span>
  <span style="color: #888a85;">(</span>2 font-lock-function-name-face<span style="color: #888a85;">)</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">look for symbols after the `</span><span style="color: #e6a8df;">::</span><span style="color: #73d216;">', they are types</span>
  <span style="color: #888a85;">(</span><span style="color: #e9b96e;">"\\_&lt;</span><span style="color: #e9b96e; font-weight: bold;">\\</span><span style="color: #e9b96e; font-weight: bold;">(</span><span style="color: #e9b96e; font-weight: bold;">\\</span><span style="color: #e9b96e; font-weight: bold;">(?:</span><span style="color: #e9b96e;">\\sw</span><span style="color: #e9b96e; font-weight: bold;">\\</span><span style="color: #e9b96e; font-weight: bold;">|</span><span style="color: #e9b96e;">\\s_</span><span style="color: #e9b96e; font-weight: bold;">\\</span><span style="color: #e9b96e; font-weight: bold;">)</span><span style="color: #e9b96e;">+</span><span style="color: #e9b96e; font-weight: bold;">\\</span><span style="color: #e9b96e; font-weight: bold;">)</span><span style="color: #e9b96e;">\\_&gt;"</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">set the limit of search to the current `</span><span style="color: #e6a8df;">type</span><span style="color: #73d216;">' form only</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">save-excursion</span> <span style="color: #888a85;">(</span>up-list<span style="color: #888a85;">)</span> <span style="color: #888a85;">(</span>point<span style="color: #888a85;">))</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">when we found all the types in the region (`</span><span style="color: #e6a8df;">type</span><span style="color: #73d216;">' form) go</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">back to the `</span><span style="color: #e6a8df;">::</span><span style="color: #73d216;">' marker</span>
  <span style="color: #888a85;">(</span>re-search-backward <span style="color: #e9b96e;">"::"</span><span style="color: #888a85;">)</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">fontify each matched symbol as type</span>
  <span style="color: #888a85;">(</span>0 font-lock-type-face<span style="color: #888a85;">))</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">when done with the symbols look for the arrows</span>
  <span style="color: #888a85;">(</span><span style="color: #e9b96e;">"-&gt;"</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">we are starting from the `</span><span style="color: #e6a8df;">::</span><span style="color: #73d216;">' again, so set the same limit as</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">for the previous search (the `</span><span style="color: #e6a8df;">type</span><span style="color: #73d216;">' form)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">save-excursion</span> <span style="color: #888a85;">(</span>up-list<span style="color: #888a85;">)</span> <span style="color: #888a85;">(</span>point<span style="color: #888a85;">))</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">do not move back when we've found all matches to ensure</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">forward progress.  At this point we are done with the form</span>
  nil
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">fontify the found arrows as variables (whatever...)</span>
  <span style="color: #888a85;">(</span>0 font-lock-variable-name-face t<span style="color: #888a85;">)))))</span>
  </pre>
  </div>

  <p>
  And the forms are fontified in very much the same way as the Haskell code above (thanks to Emacs's amazing consistency with font-lock faces, another brilliant design decision).
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span>type function <span style="color: #ad7fa8;">::</span> int -&gt; string -&gt; <span style="color: #888a85;">(</span>string -&gt; int<span style="color: #888a85;">)</span> -&gt; [float]<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>type constant <span style="color: #ad7fa8;">::</span> int<span style="color: #888a85;">)</span>

  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">string</span> <span style="color: #888a85;">(</span>string int<span style="color: #888a85;">)</span>
  <span style="color: #e9b96e;">"The keywords outside of the type form are *not* fontified!"</span><span style="color: #888a85;">)</span>
  </pre>
  </div>

  <p>
  I repeat it here just for completeness:
  </p>

  <div class="org-src-container">
  <pre class="src src-haskell"><span style="color: #fce94f;">function</span> <span style="color: #fcaf3e;">::</span> <span style="color: #8cc4ff;">Int</span> <span style="color: #fcaf3e;">-&gt;</span> <span style="color: #8cc4ff;">String</span> <span style="color: #fcaf3e;">-&gt;</span> (<span style="color: #8cc4ff;">String</span> <span style="color: #fcaf3e;">-&gt;</span> <span style="color: #8cc4ff;">Int</span>) <span style="color: #fcaf3e;">-&gt;</span> [<span style="color: #8cc4ff;">Float</span>]
  <span style="color: #fce94f;">constant</span> <span style="color: #fcaf3e;">::</span> <span style="color: #8cc4ff;">Int</span>
  </pre>
  </div>

  <p>
  Awesome.
  </p>
  ]]></description>
</item>

<item>
  <title>Visit the org headline from the attach dired buffer</title>
  <link>https://fuco1.github.io/2023-02-08-Visit-the-org-headline-from-the-attach-dired-buffer.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2023-02-08-Visit-the-org-headline-from-the-attach-dired-buffer.html</guid>
  <pubDate>Wed, 08 Feb 2023 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  I am a heavy heavy user of <code>org-attach</code>.  Pretty much all my binary data
  from the last fifteen years live somewhere under <code>~/data/org-attach</code>
  (set via <code>org-attach-id-dir</code>), further nested under the org headline ID.
  After experimenting with many ways to organize data, including
  <a href="https://www.tagsistant.net/">tagsistant</a> and other semantic filesystems, this is what stuck the
  best:
  </p>

  <p>
  Make a headline in some of your org files (I have various files such
  as <code>knowledgebase.org</code>, <code>bookmarks.org</code>, <code>movies.org</code>, <code>emacs.org</code>, ...), hit
  <kbd>C-c C-a</kbd> and attach the file to the "headline".  To later search for it
  you can use all the powerful indexing and search facilities of
  org-mode.  The whole directory is checked into <a href="https://git-annex.branchable.com/">git-annex</a> and backed in
  various cloud providers and external drives.
  </p>

  <p>
  I don't really care about where or how the data itself is stored and I
  treat the <code>org-attach</code> directory as an opaque "blob"
  store<sup><a id="fnr.4" class="footref" href="#fn.4" role="doc-backlink">4</a></sup>.
  This works 99% of the time because I usually want to find the file
  where I have some vague semantic idea of what it is and usually find
  it via org interface and then open the attachment.
  </p>

  <p>
  For the rare cases I can't figure out where I stored a file, I use the
  usual <code>locate</code> or <code>find</code> utilities.  When I finally get to the dired
  buffer for this attachment, I usually want to visit its corresponding
  headline to either add more keywords or somehow make it easier to find
  this file again through the org interface.
  </p>

  <p>
  So I wrote this simple utility function to jump back to the headline
  to edit it:
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-org-attach-visit-headline-from-dired</span> <span style="color: #888a85;">()</span>
  <span style="color: #e9b96e;">"Go to the headline corresponding to this org-attach directory."</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">interactive</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let*</span> <span style="color: #888a85;">((</span>id-parts <span style="color: #888a85;">(</span>last <span style="color: #888a85;">(</span>split-string default-directory <span style="color: #e9b96e;">"/"</span> t<span style="color: #888a85;">)</span> 2<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>id <span style="color: #888a85;">(</span>apply <span style="color: #8cc4ff;">#'concat</span> id-parts<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>m <span style="color: #888a85;">(</span>org-id-find id <span style="color: #e6a8df;">'marker</span><span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">unless</span> m <span style="color: #888a85;">(</span><span style="color: #ff4b4b;">user-error</span> <span style="color: #e9b96e;">"Cannot find entry with ID \"%s\""</span> id<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>pop-to-buffer <span style="color: #888a85;">(</span>marker-buffer m<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>goto-char m<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>move-marker m nil<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-fold-show-context<span style="color: #888a85;">))))</span>
  </pre>
  </div>

  <p>
  Bind this to some <a href="https://github.com/Fuco1/free-keys">free key</a> in the dired mode map and you can jump back and forth with ease.
  </p>
  ]]></description>
</item>

<item>
  <title>Add fontification for progress cookie in org agenda</title>
  <link>https://fuco1.github.io/2022-01-04-Add-fontification-for-progress-cookie-in-org-agenda.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2022-01-04-Add-fontification-for-progress-cookie-in-org-agenda.html</guid>
  <pubDate>Tue, 04 Jan 2022 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  In Org mode, there is an easy way to visualize progress on a task with
  subtasks.  You can place a "progress cookie" <code>[/]</code> or <code>[%]</code> in the title
  of a TODO task or parent item in a list, hit <kbd>C-c C-c</kbd> and Org will
  calculate the progress for you.
  </p>

  <div class="org-src-container">
  <pre class="src src-org"><span style="color: #fce94f;">* </span><span style="color: #ff4b4b; font-weight: bold;">TODO</span><span style="color: #fce94f;"> foo </span><span style="color: #e6a8df; font-weight: bold;">[1/3]</span>
  <span style="color: #2e3436;">*</span><span style="color: #fcaf3e;">* </span><span style="color: #ff4b4b; font-weight: bold;">TODO</span><span style="color: #fcaf3e;"> one</span>
  <span style="color: #2e3436;">*</span><span style="color: #fcaf3e;">* </span><span style="color: #ff4b4b; font-weight: bold;">TODO</span><span style="color: #fcaf3e;"> two</span>
  <span style="color: #2e3436;">*</span><span style="color: #fcaf3e;">* </span><span style="color: #73d216; font-weight: bold;">DONE</span><span style="color: #fcaf3e;"> </span><span style="color: #888a85;">three</span>
  <span style="color: #8cc4ff; font-weight: bold;">- </span>parent <span style="color: #e6a8df; font-weight: bold;">[66%]</span>
  <span style="color: #888a85; font-weight: bold;">  </span><span style="color: #888a85; font-weight: bold;">- </span><span style="color: #888a85; font-weight: bold;">[X]</span><span style="color: #888a85;"> one</span>
  <span style="color: #888a85; font-weight: bold;">  </span><span style="color: #888a85; font-weight: bold;">- </span><span style="color: #888a85; font-weight: bold;">[X]</span><span style="color: #888a85;"> two</span>
  <span style="color: #8cc4ff; font-weight: bold;">  </span><span style="color: #8cc4ff; font-weight: bold;">- </span><span style="color: #8cc4ff; font-weight: bold;">[ ]</span> three
  </pre>
  </div>

  <p>
  These are fontified with <code>org-checkbox-statistics-todo</code> to make them
  easily stand out.  However, for some reason this face is not applied
  in the Org agenda buffer.
  </p>

  <p>
  Because the agenda buffer does not use font-lock for fontifying and
  instead inserts already fontified text in the buffer directly, we
  can't simply add a regexp with <code>font-lock-add-keywords</code>.  But the
  solution is nonetheless very straight-forward.  Create a function
  which will search for the regexp in the buffer and add the face text
  property.  Then add it to the <code>org-agenda-finalize-hook</code> and that's
  that!
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-fontify-progress-cookie</span> <span style="color: #888a85;">()</span>
  <span style="color: #e9b96e;">"Fontify progress cookies in org agenda."</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">save-excursion</span>
  <span style="color: #888a85;">(</span>goto-char <span style="color: #888a85;">(</span>point-min<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">while</span> <span style="color: #888a85;">(</span>re-search-forward <span style="color: #e9b96e;">"\\[[[:digit:]]+/[[:digit:]]+\\]"</span> nil t<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>add-face-text-property <span style="color: #888a85;">(</span>match-beginning 0<span style="color: #888a85;">)</span> <span style="color: #888a85;">(</span>match-end 0<span style="color: #888a85;">)</span>
  <span style="color: #e6a8df;">'org-checkbox-statistics-todo</span><span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>goto-char <span style="color: #888a85;">(</span>point-min<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">while</span> <span style="color: #888a85;">(</span>re-search-forward <span style="color: #e9b96e;">"\\[[[:digit:]]+%\\]"</span> nil t<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>add-face-text-property <span style="color: #888a85;">(</span>match-beginning 0<span style="color: #888a85;">)</span> <span style="color: #888a85;">(</span>match-end 0<span style="color: #888a85;">)</span>
  <span style="color: #e6a8df;">'org-checkbox-statistics-todo</span><span style="color: #888a85;">))))</span>

  <span style="color: #888a85;">(</span>add-hook <span style="color: #e6a8df;">'org-agenda-finalize-hook</span> <span style="color: #e6a8df;">'my-fontify-progress-cookie</span><span style="color: #888a85;">)</span>
  </pre>
  </div>
  ]]></description>
</item>

<item>
  <title>Restrict agenda to multiple subtrees</title>
  <link>https://fuco1.github.io/2021-05-29-Restrict-agenda-to-multiple-subtrees.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2021-05-29-Restrict-agenda-to-multiple-subtrees.html</guid>
  <pubDate>Sat, 29 May 2021 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  The function <code>org-agenda-set-restriction-lock</code> is very useful for
  speeding up agenda when working on a specific project (implemented as
  a file or an Orgmode subtree).  Personally, I use two agenda views,
  one "quick" with 5 simple sections and one "full" with 10 rather
  complicated sections.
  </p>

  <p>
  The quick one lists all the actionable tasks, all the stuck tasks or
  notes that need to be processed and refiled.  The full one lists all
  the tasks from the project, including hierarchical project
  dependencies, tasks on hold, bugs, waiting tasks and so on.  The full
  view takes a lot more processing power and is not useful maybe 80% of
  the time when I simply want to find work to do next.
  </p>

  <p>
  For the times when I want to get a complete overview over a project
  and do some light management or planning, I use the full agenda view.
  </p>

  <p>
  One thing that kept bothering me was that the only option was to
  restrict to a file or a subtree, but nothing in
  between<sup><a id="fnr.5" class="footref" href="#fn.5" role="doc-backlink">5</a></sup>, such as a
  region spanning multiple subtrees.  Since I'm not a huge fan of
  nesting headers just for the sake of nesting (flatter structures and
  <a href="https://github.com/Fuco1/org-node-graph">graphs</a> are much nicer for organization).
  </p>

  <p>
  Luckily, the function <code>org-agenda-set-restriction-lock</code> is fairly
  hackable.  It uses overlays and markers for managing the restriction,
  so all we need to do is grab the current active region's bounds and
  set the org variables appropriately.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-org-agenda-set-restriction-lock</span> <span style="color: #888a85;">(</span>orig-fun <span style="color: #8cc4ff;">&amp;optional</span> type<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">if</span> <span style="color: #888a85;">(</span>not <span style="color: #888a85;">(</span>use-region-p<span style="color: #888a85;">))</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">unless a region is active, use the original function for</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">cancel/file/subtree</span>
  <span style="color: #888a85;">(</span>funcall orig-fun type<span style="color: #888a85;">)</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">here we do approximately the same as subtree except find the</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">beginning of subtree at region's beginning and end of subtree</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">at region's end (could span multiple subtrees)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> org-agenda-restrict <span style="color: #888a85;">(</span>current-buffer<span style="color: #888a85;">))</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">use 'my-region to avoid potential future conflict</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> org-agenda-overriding-restriction <span style="color: #e6a8df;">'my-region</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>put <span style="color: #e6a8df;">'org-agenda-files</span> <span style="color: #e6a8df;">'org-restrict</span>
  <span style="color: #888a85;">(</span>list <span style="color: #888a85;">(</span>buffer-file-name <span style="color: #888a85;">(</span>buffer-base-buffer<span style="color: #888a85;">))))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>beg <span style="color: #888a85;">(</span>region-beginning<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>end <span style="color: #888a85;">(</span>region-end<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">save-excursion</span>
  <span style="color: #888a85;">(</span>goto-char beg<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-back-to-heading t<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> beg <span style="color: #888a85;">(</span>point<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">save-excursion</span>
  <span style="color: #888a85;">(</span>goto-char end<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-end-of-subtree t t<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> end <span style="color: #888a85;">(</span>point<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span>move-overlay org-agenda-restriction-lock-overlay
  beg
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">if</span> org-agenda-restriction-lock-highlight-subtree
  end
  <span style="color: #888a85;">(</span>point-at-eol<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span>move-marker org-agenda-restrict-begin beg<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>move-marker org-agenda-restrict-end end<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>message <span style="color: #e9b96e;">"Locking agenda restriction to region"</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-agenda-maybe-redo<span style="color: #888a85;">)))</span>

  <span style="color: #888a85;">(</span>advice-add <span style="color: #e6a8df;">'org-agenda-set-restriction-lock</span> <span style="color: #ad7fa8;">:around</span> <span style="color: #8cc4ff;">#'my-org-agenda-set-restriction-lock</span><span style="color: #888a85;">)</span>
  </pre>
  </div>
  ]]></description>
</item>

<item>
  <title>Org mode and google calendar sync</title>
  <link>https://fuco1.github.io/2019-02-02-Org-mode-and-google-calendar-sync.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2019-02-02-Org-mode-and-google-calendar-sync.html</guid>
  <pubDate>Sat, 02 Feb 2019 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  As a contractor working for multiple clients I juggle many projects
  and meetings all the time.  Fortunately for me, there is <a href="https://orgmode.org/">orgmode</a>.
  Unfortunately, my clients have not yet learned to appreciate its
  merits.  Fortunately though, they all use the GSuite platform from
  Google, which means agendas are planned in Google Calendars.
  </p>

  <p>
  So I finally bit the bullet and decided to integrate Google Calendar
  into my org agenda.  I didn't have to go a long way before finding
  <a href="https://github.com/kidd/org-gcal.el">org-gcal.el</a>.
  </p>

  <p>
  My setup is taken mostly from <a href="https://cestlaz.github.io/posts/using-emacs-26-gcal/">Using Emacs - 26 - Google Calendar, Org
  Agenda</a> by the amazing Mike Zamansky.  One difference from Mike's setup
  is that I'm using a single-way sync only, that is I only fetch from
  google calendar and do not publish anything.
  </p>

  <p>
  The reason is that I use multiple calendars (I basically have a google
  account at every company I work for plus a personal calendar) and the
  workflow with events and inviting myself from one calendar to another
  as attendees is too complex and fragile to trust some automated tool.
  And I can not afford my calendars to break.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">use-package</span> <span style="color: #e6a8df;">org-gcal</span>
  <span style="color: #ad7fa8;">:after</span> org
  <span style="color: #ad7fa8;">:config</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> org-gcal-client-id <span style="color: #e9b96e;">"781554523097-ocjovnfpqgtpoc4qv7ubr8c679t96bv7.apps.googleusercontent.com"</span>
  org-gcal-client-secret <span style="color: #e9b96e;">"&lt;&lt;gcal-secret&gt;&gt;"</span>
  org-gcal-file-alist '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"matus.goljer@gmail.com"</span> . <span style="color: #e9b96e;">"~/org/gcal.org"</span><span style="color: #888a85;">))</span>
  org-gcal-header-alist '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"matus.goljer@gmail.com"</span> . <span style="color: #e9b96e;">"#+PROPERTY: TIMELINE_FACE \"pink\"\n"</span><span style="color: #888a85;">))</span>
  org-gcal-auto-archive nil
  org-gcal-notify-p nil<span style="color: #888a85;">)</span>

  <span style="color: #888a85;">(</span>add-hook <span style="color: #e6a8df;">'org-agenda-mode-hook</span> <span style="color: #e6a8df;">'org-gcal-fetch</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>add-hook <span style="color: #e6a8df;">'org-capture-after-finalize-hook</span> <span style="color: #e6a8df;">'org-gcal-fetch</span><span style="color: #888a85;">))</span>
  </pre>
  </div>

  <p>
  I'm also using <a href="https://github.com/Fuco1/org-timeline">org-timeline</a> so I add some extra header arguments to
  the generated file to add a different color to the Google Calendar
  entries.
  </p>
  ]]></description>
</item>

<item>
  <title>Use the input method from original org buffer in log note buffer</title>
  <link>https://fuco1.github.io/2019-01-23-Use-the-input-method-from-original-org-buffer-in-log-note-buffer.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2019-01-23-Use-the-input-method-from-original-org-buffer-in-log-note-buffer.html</guid>
  <pubDate>Wed, 23 Jan 2019 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  On switching various TODO states I've set up org mode to pop a buffer
  for <a href="https://orgmode.org/manual/Tracking-TODO-state-changes.html">attaching a quick note or explanation</a>.  You can do this also for
  refiling, clocking in or out, rescheduling and so on.
  </p>

  <p>
  I don't use these logs very often in a review or retrospective but it
  helped me a bunch of times to figure out the circumstances of my past
  actions (e.g. rescheduling, postponing work etc.) so I find it worth
  to spend 30 seconds jotting down a simple note as opposed to then
  trying to figure out everything from scratch for hours.
  </p>

  <p>
  Especially useful for when you are not meeting client's
  deadlines. Papertrail is good!
  </p>

  <p>
  Also being a daily journalist and somewhat obsessive about tracking my
  life my settings here are pretty aggressive.
  </p>

  <p>
  One thing that buggs me is, being not a native English speaker, is
  that when <code>org-mode</code> pops the note buffer its input method resets to
  English.  Given the fact that the past and current org maintainers
  also don't speak English as a first language kind of led me to expect
  there to be some setting to inherit the input method of the original
  buffer<sup><a id="fnr.6" class="footref" href="#fn.6" role="doc-backlink">6</a></sup>.  Sadly, I
  couldn't find it, so I decided to "roll my own".
  </p>

  <p>
  Now here comes the part that blew my mind... I've realized I wrote the
  whole code in under 2 minutes... where simply trying to read the
  manual and search the code would easily take more
  time<sup><a id="fnr.7" class="footref" href="#fn.7" role="doc-backlink">7</a></sup>.  This is the nice feature of being an Emacs power-user.  I
  wrote the code on the first try, registered it in a hook which name
  I've guessed and it all worked flawlessly.  Nice!
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-org-inherit-input-method</span> <span style="color: #888a85;">()</span>
  <span style="color: #e9b96e;">"Set the input method of this buffer to that of original's buffer."</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let*</span> <span style="color: #888a85;">((</span>note-buffer <span style="color: #888a85;">(</span>marker-buffer org-log-note-marker<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>im <span style="color: #888a85;">(</span><span style="color: #b4fa70;">with-current-buffer</span> note-buffer
  current-input-method<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span>set-input-method im<span style="color: #888a85;">)))</span>

  <span style="color: #888a85;">(</span>add-hook <span style="color: #e6a8df;">'org-log-buffer-setup-hook</span> <span style="color: #e6a8df;">'my-org-inherit-input-method</span><span style="color: #888a85;">)</span>
  </pre>
  </div>

  <p>
  Of course, I've spent thousands of hours learning Elisp, so I'm not
  sure where or when the time/productivity curves actually crossed.
  </p>
  ]]></description>
</item>

<item>
  <title>Make agenda clockreport respect =org-extend-today-until=</title>
  <link>https://fuco1.github.io/2019-01-03-Make-agenda-clockreport-respect-=org-extend-today-until=.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2019-01-03-Make-agenda-clockreport-respect-=org-extend-today-until=.html</guid>
  <pubDate>Thu, 03 Jan 2019 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  There's a cool but little known <a href="https://orgmode.org/">org-mode</a> setting for all the the night
  owls out there called <code>org-extend-today-until</code>.  It does quite what you
  would expect: you can tell org-mode when your "logical" midnight is.
  For me, I rarely go to sleep before 12 pm so I set it to 4 am just to
  be sure.  This way even if it's already 0:15 and I refresh the agenda
  view it still displays "yesterday".
  </p>

  <p>
  The trouble is that not a lot of org mode actually respects this
  setting, so far the only things mentioned in the docstring are the
  agenda day switch and something related to reading dates from the user
  (I think through <code>C-c .</code>) but I can't see any difference in that.  If
  you are using the org modeline and summary clock for today's time
  spent on a task this will also only count contributions from the
  specified hour which is nice.  There is probably more but I haven't
  noticed yet.
  </p>

  <p>
  Since I'm an <code>org-agenda-clockreport-mode</code> I want to have that
  consistent with the modeline information.  However it goes through
  entirely different machinery and so the easiest extension point is
  simply put an advice on the function which collects the data
  (<code>org-clock-get-table-data</code>) and in case we are working in the agenda
  scope adjust the <code>:tstart</code> and <code>:tend</code> properties to respect
  <code>org-extend-today-until</code>.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-convert-org-today-to-timestamp</span> <span style="color: #888a85;">(</span>ts<span style="color: #888a85;">)</span>
  <span style="color: #e9b96e;">"Convert TS to timestamp.</span>

  <span style="color: #e9b96e;">TS is an absolute number of days since 0001-12-31bce</span>

  <span style="color: #e9b96e;">The timestamp returned is in the format YYYY-MM-DD hh:mm.  The</span>
  <span style="color: #e9b96e;">hour is adjusted according to `</span><span style="color: #e6a8df;">org-extend-today-until</span><span style="color: #e9b96e;">'."</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>ts-greg <span style="color: #888a85;">(</span>calendar-gregorian-from-absolute ts<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span>format <span style="color: #e9b96e;">"%4d-%02d-%02d %02d:00"</span>
  <span style="color: #888a85;">(</span>nth 2 ts-greg<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>car ts-greg<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>nth 1 ts-greg<span style="color: #888a85;">)</span>
  org-extend-today-until<span style="color: #888a85;">)))</span>

  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-org-clock-get-table-data-adjust-start</span> <span style="color: #888a85;">(</span>origfun file params<span style="color: #888a85;">)</span>
  <span style="color: #e9b96e;">"Adjust the start and end arguments to respect `</span><span style="color: #e6a8df;">org-extend-today-until</span><span style="color: #e9b96e;">'."</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">when</span> <span style="color: #888a85;">(</span><span style="color: #b4fa70;">and</span> <span style="color: #888a85;">(</span>eq <span style="color: #888a85;">(</span>plist-get params <span style="color: #ad7fa8;">:scope</span><span style="color: #888a85;">)</span> <span style="color: #e6a8df;">'agenda</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>integerp <span style="color: #888a85;">(</span>plist-get params <span style="color: #ad7fa8;">:tstart</span><span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>ts <span style="color: #888a85;">(</span>my-convert-org-today-to-timestamp <span style="color: #888a85;">(</span>plist-get params <span style="color: #ad7fa8;">:tstart</span><span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span>te <span style="color: #888a85;">(</span>my-convert-org-today-to-timestamp <span style="color: #888a85;">(</span>plist-get params <span style="color: #ad7fa8;">:tend</span><span style="color: #888a85;">))))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> params <span style="color: #888a85;">(</span>plist-put params <span style="color: #ad7fa8;">:tstart</span> ts<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> params <span style="color: #888a85;">(</span>plist-put params <span style="color: #ad7fa8;">:tend</span> te<span style="color: #888a85;">))))</span>
  <span style="color: #888a85;">(</span>funcall origfun file params<span style="color: #888a85;">))</span>

  <span style="color: #888a85;">(</span>advice-add <span style="color: #e6a8df;">'org-clock-get-table-data</span> <span style="color: #ad7fa8;">:around</span> <span style="color: #8cc4ff;">#'my-org-clock-get-table-data-adjust-start</span><span style="color: #888a85;">)</span>
  </pre>
  </div>

  <p>
  Recently I've been adding some nice improvements to my <a href="https://github.com/Fuco1/org-timeline">org-timeline</a>
  package which draws a visual representation of all the
  scheduled/clocked items (see README for visuals).  I'll make sure it
  respects this setting as well.  So far I've instinctively set it to
  start drawing at 5:00.
  </p>
  ]]></description>
</item>

<item>
  <title>Multiline fontification with org-emphasis-alist</title>
  <link>https://fuco1.github.io/2018-12-23-Multiline-fontification-with-org-emphasis-alist.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2018-12-23-Multiline-fontification-with-org-emphasis-alist.html</guid>
  <pubDate>Sun, 23 Dec 2018 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  By default org mode only fontifies spans of text wrapped in emphasis
  markers (customized with <code>org-emphasis-alist</code>) if they extend through at
  most one newline.  This is probably a performance optimization, one
  wholly unnecessary on modern hardware.
  </p>

  <p>
  As per this <a href="https://emacs.stackexchange.com/questions/18101/org-mode-multi-line-emphasis-and-bold">stack overflow</a> post I re-set the constant to 10 lines and
  can probably even increase it if necessary.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span>setcar <span style="color: #888a85;">(</span>nthcdr 4 org-emphasis-regexp-components<span style="color: #888a85;">)</span> 10<span style="color: #888a85;">)</span>
  </pre>
  </div>

  <p>
  Before this starts to work you need to re-save <code>org-emphasis-alist</code>
  through the customize interface because it is using a custom setter
  <code>org-set-emph-re</code> to compute the regexpses (or, <i><b>gulp</b></i>, restart Emacs).
  </p>

  <p>
  Here I quote the answer in case it ever gets lost:
  </p>

  <div class="org-src-container">
  <pre class="src src-markdown">By default, org-mode allows a single newline. So if you want to be
  able to add markup to text that spans more than two consecutive lines,
  you'll need to modify this entry.

  <span style="color: #e6a8df; background-color: #232a2b;">    (setcar (nthcdr 4 org-emphasis-regexp-components) N)</span>

  ... where N is the number of newlines you want to allow.
  </pre>
  </div>
  ]]></description>
</item>
<div id="footnotes">
  <h2 class="footnotes">Footnotes: </h2>
  <div id="text-footnotes">

    <div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">Now before we go
    further, you need to register on <a href="https://platform.openai.com/">OpenAI platform</a> and the API costs
    money.  The good news is that it is <b>extremely</b> cheap.  It will cost
    you $1 to embed 2.4 MILLION tokens.  With a query being roughly 10
    words which corresponds to 10-15 tokens, one query will cost you
    about $0.0000006.  So it's pretty much free and you only need a
    credit card to formally register.  You can also set monthly
    spending limit to $0.01 and you would probably never run over the
    limit. The step 2 will cost based on how much data you have.  I
    have about 200000 lines of org files and so far I spent less than
    $0.50 including all the experimenting.</p></div></div>

    <div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">Emacs RE engine is a lot less powerful than PCRE engines, it doesn't support look-ahead nor back-references among other less commonly used features</p></div></div>

    <div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">For those familiar with Parsec, this is basically the <code>try</code> combinator</p></div></div>

    <div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4" role="doc-backlink">4</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">This really removed a lot of "create a
    perfect file hierarchy" anxiety that ultra-orderly people like me get
    all the time.  I am no longer slave to the perpetual fine-tuning of
    what is nested where.  The files on the disk are actually stored in a
    flat two-level hierarchy determined by some hash or uuid.  This is
    great!  And the semantics of what the file is and how to find it is
    delegated to org mode.  This is even greater because its metadata are
    so much ritcher than what you can store in the file system itself.</p></div></div>

    <div class="footdef"><sup><a id="fn.5" class="footnum" href="#fnr.5" role="doc-backlink">5</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">While it is possible to restrict to a
    region from the org-agenda speed dial, I find it quite impractical and
    prefer to do the restrictions from the project's buffer</p></div></div>

    <div class="footdef"><sup><a id="fn.6" class="footnum" href="#fnr.6" role="doc-backlink">6</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">And really, 99% of the time, when you say "I'm
    going to write an org-extension", it already is in core.</p></div></div>

    <div class="footdef"><sup><a id="fn.7" class="footnum" href="#fnr.7" role="doc-backlink">7</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">This is not the greatest engineering and you
    should almost always prefer a well-tested lib over your own... on the
    other hand, being a pragmatic professional, I value my time over code
    purity</p></div></div>


  </div>
</div></channel>
</rss>