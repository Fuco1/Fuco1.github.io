<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
	 xmlns:content="http://purl.org/rss/1.0/modules/content/"
	 xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	 xmlns:dc="http://purl.org/dc/elements/1.1/"
	 xmlns:atom="http://www.w3.org/2005/Atom"
	 xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	 xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	 xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Matus Goljer (Fuco1)</title>
  <atom:link href="https://fuco1.github.io/rss.xml" rel="self" type="application/rss+xml" />
  <link>https://fuco1.github.io/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Wed, 08 Feb 2023 16:03:25 +0100</pubDate>
  <lastBuildDate>Wed, 08 Feb 2023 16:03:25 +0100</lastBuildDate>
  <generator>Emacs 28.1 Org-mode 9.6.1</generator>
  <webMaster>matus.goljer@gmail.com (Matúš Goljer)</webMaster>
  <image>
    <url>https://orgmode.org/img/org-mode-unicorn-logo.png</url>
    <title>Matus Goljer (Fuco1)</title>
    <link>https://fuco1.github.io/</link>
  </image>

  <item>
    <title>Font-locking with custom matchers</title>
    <link>https://fuco1.github.io/2017-06-11-Font-locking-with-custom-matchers.html</link>
    <author>matus.goljer@gmail.com (Matúš Goljer)</author>
    <guid isPermaLink="false">https://fuco1.github.io/2017-06-11-Font-locking-with-custom-matchers.html</guid>
    <pubDate>Sun, 11 Jun 2017 00:00:00 +0200</pubDate>

    <description><![CDATA[<table id="orgee4e220" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


    <colgroup>
    <col  class="org-right" />

    <col  class="org-left" />
    </colgroup>
    <thead>
    <tr>
    <th scope="col" class="org-right">Date</th>
    <th scope="col" class="org-left">Change</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td class="org-right">2017-06-21</td>
    <td class="org-left">The regexp was fixed to match <code>$FOO_BAR</code> and skip escaped dollars (see this <a href="https://github.com/Fuco1/Fuco1.github.io/pull/6">PR</a>)</td>
    </tr>
    </tbody>
    </table>

    <p>
    Previously I have written about <a href="./2017-06-01-The-absolute-awesomeness-of-anchored-font-lock-matchers.html#org6db07d1">font-lock anchored matchers</a>.  Today I have come across another problem and another solution with Emacs's font-lock mechanism.  This trend is starting to annoy me.
    </p>

    <p>
    I now work at a DevOps position and so I have been writing a lot of shell scripts lately to glue all the stuff we do together.  One missing feature that kept bugging me was the font-locking of interpolated variables in <code>sh-mode</code>... that is, the fact that there wasn't any!
    </p>

    <div class="org-src-container">
    <pre class="src src-bash"><span style="color: #fcaf3e;">FOO</span>=<span style="color: #e9b96e;">"hello"</span>
    <span style="color: #73d216;"># </span><span style="color: #73d216;">ugly brown!</span>
    <span style="color: #fcaf3e;">BAR</span>=<span style="color: #e9b96e;">"hello $FOO"</span>
    <span style="color: #73d216;"># </span><span style="color: #73d216;">I would really like to see that $FOO is *not* being interpolated</span>
    <span style="color: #fcaf3e;">BAZ</span>=<span style="color: #e9b96e;">'hello $FOO'</span>
    <span style="color: #73d216;"># </span><span style="color: #73d216;">in regular usage things are highlighted, but you should always quote, right?</span>
    bash $<span style="color: #fcaf3e;">FOO</span> $<span style="color: #fcaf3e;">BAR</span> ${<span style="color: #fcaf3e;">BAZ</span>}
    </pre>
    </div>

    <p>
    The problem with shell programming is that you quote 90% of the time and so the font-locking is wasted :/  You might say, well, just throw in the regexp, right?  Not quite.  We do not want to highlight variables in single-quoted strings where they are not interpolated.  This means we need to only match variables in certain syntactic context.
    </p>

    <p>
    In the previous post I mentioned you can use custom matchers which are essentially regular elisp functions so long as you conform to the interface of <code>re-search-forward</code>.  So that is exactly what I've done.
    </p>

    <p>
    The following function is a bit convoluted because you need to check the parse state.  Note that the function should only "process" <b>one</b> match as <code>font-lock</code> will execute it in a loop until it returns <code>nil</code> or moves point after the <code>limit</code>.
    </p>

    <ol class="org-ol">
    <li>Look for the next string matching a variable syntax, which is either
    <ul class="org-ul">
    <li>a <code>$</code> followed by word syntax, or</li>
    <li>a <code>$</code> followed by text enclosed in <code>{}.</code></li>
    </ul></li>
    <li>If no match then return nil.  This will tell the font-lock engine
    there is nothing to do up to <code>limit</code>.  This happens if the
    <code>re-search-forward</code> returns <code>nil</code> right away or eventually runs out of
    matches as we get over <code>limit</code>.</li>
    <li>If match, check if we are inside a double-quoted string.
    <ul class="org-ul">
    <li>If so, great, announce a match with a <code>throw</code> and the point where
    we ended (this is not strictly necessary, you only need to
    return non-nil).</li>
    <li>If not <code>GOTO 1</code>.</li>
    </ul></li>
    </ol>

    <div class="org-src-container">
    <pre class="src src-elisp" id="org046d41f"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-match-variables-in-quotes</span> <span style="color: #888a85;">(</span>limit<span style="color: #888a85;">)</span>
    <span style="color: #e9b96e;">"Match variables in double-quotes in `</span><span style="color: #e6a8df;">sh-mode</span><span style="color: #e9b96e;">'."</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">with-syntax-table</span> sh-mode-syntax-table
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">catch</span> '<span style="color: #e6a8df;">done</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">while</span> <span style="color: #888a85;">(</span>re-search-forward
    <span style="color: #73d216;">;; </span><span style="color: #73d216;">`</span><span style="color: #e6a8df;">rx</span><span style="color: #73d216;">' is cool, mkay.</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">rx</span> <span style="color: #888a85;">(</span><span style="color: #b4fa70;">or</span> line-start <span style="color: #888a85;">(</span>not <span style="color: #888a85;">(</span>any <span style="color: #e9b96e;">"\\"</span><span style="color: #888a85;">)))</span>
    <span style="color: #888a85;">(</span>group <span style="color: #e9b96e;">"$"</span><span style="color: #888a85;">)</span>
    <span style="color: #888a85;">(</span>group
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">or</span> <span style="color: #888a85;">(</span><span style="color: #b4fa70;">and</span> <span style="color: #e9b96e;">"{"</span> <span style="color: #888a85;">(</span>+? nonl<span style="color: #888a85;">)</span> <span style="color: #e9b96e;">"}"</span><span style="color: #888a85;">)</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">and</span> <span style="color: #888a85;">(</span>+ <span style="color: #888a85;">(</span>any alnum <span style="color: #e9b96e;">"_"</span><span style="color: #888a85;">)))</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">and</span> <span style="color: #888a85;">(</span>any <span style="color: #e9b96e;">"*"</span> <span style="color: #e9b96e;">"@"</span> <span style="color: #e9b96e;">"#"</span> <span style="color: #e9b96e;">"?"</span> <span style="color: #e9b96e;">"-"</span> <span style="color: #e9b96e;">"$"</span> <span style="color: #e9b96e;">"!"</span> <span style="color: #e9b96e;">"0"</span> <span style="color: #e9b96e;">"_"</span><span style="color: #888a85;">)))))</span>
    limit t<span style="color: #888a85;">)</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">-when-let</span> <span style="color: #888a85;">(</span>string-syntax <span style="color: #888a85;">(</span>nth 3 <span style="color: #888a85;">(</span>syntax-ppss<span style="color: #888a85;">)))</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">when</span> <span style="color: #888a85;">(</span>= string-syntax 34<span style="color: #888a85;">)</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">throw</span> '<span style="color: #e6a8df;">done</span> <span style="color: #888a85;">(</span>point<span style="color: #888a85;">))))))))</span>
    </pre>
    </div>

    <p>
    Add the support to the current buffer (use <code>nil</code> as first argument) or <code>sh-mode</code> globally (use <code>'sh-mode</code>):
    </p>

    <div class="org-src-container">
    <pre class="src src-elisp" id="org3bbe08f"><span style="color: #888a85;">(</span>font-lock-add-keywords
    <span style="color: #e6a8df;">'sh-mode</span> '<span style="color: #888a85;">((</span>my-match-variables-in-quotes
    <span style="color: #888a85;">(</span>1 <span style="color: #e6a8df;">'default</span> t<span style="color: #888a85;">)</span>
    <span style="color: #888a85;">(</span>2 font-lock-variable-name-face t<span style="color: #888a85;">))))</span>
    </pre>
    </div>

    <p>
    Quite simple and the outcome is very satisfying.  Makes reading shell scripts a lot better in my opinion.  If any of you cares to submit this upstream go ahead, I have signed the contributor papers but I hereby withdraw all claims on the above code so you don't have to go through hoops :)
    </p>

    <div class="org-src-container">
    <pre class="src src-sh"><span style="color: #fcaf3e;">FOO</span>=<span style="color: #e9b96e;">"hello"</span>
    <span style="color: #73d216;"># </span><span style="color: #73d216;">yay</span>
    <span style="color: #fcaf3e;">BAR</span>=<span style="color: #e9b96e;">"hello </span><span style="color: #eeeeec; background-color: #2e3436;">$</span><span style="color: #fcaf3e;">FOO</span><span style="color: #e9b96e;"> and also </span><span style="color: #eeeeec; background-color: #2e3436;">$</span><span style="color: #fcaf3e;">{FOO}</span><span style="color: #e9b96e;">"</span>
    <span style="color: #73d216;"># </span><span style="color: #73d216;">No interpolation in single-quotes</span>
    <span style="color: #fcaf3e;">BAZ</span>=<span style="color: #e9b96e;">'hello $FOO'</span>
    </pre>
    </div>
    ]]></description>
</item>

<item>
  <title>Visit the org headline from the attach dired buffer</title>
  <link>https://fuco1.github.io/2023-02-08-Visit-the-org-headline-from-the-attach-dired-buffer.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2023-02-08-Visit-the-org-headline-from-the-attach-dired-buffer.html</guid>
  <pubDate>Wed, 08 Feb 2023 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  I am a heavy heavy user of <code>org-attach</code>.  Pretty much all my binary data
  from the last fifteen years live somewhere under <code>~/data/org-attach</code>
  (set via <code>org-attach-id-dir</code>), further nested under the org headline ID.
  After experimenting with many ways to organize data, including
  <a href="https://www.tagsistant.net/">tagsistant</a> and other semantic filesystems, this is what stuck the
  best:
  </p>

  <p>
  Make a headline in some of your org files (I have various files such
  as <code>knowledgebase.org</code>, <code>bookmarks.org</code>, <code>movies.org</code>, <code>emacs.org</code>, ...), hit
  <kbd>C-c C-a</kbd> and attach the file to the "headline".  To later search for it
  you can use all the powerful indexing and search facilities of
  org-mode.  The whole directory is checked into <a href="https://git-annex.branchable.com/">git-annex</a> and backed in
  various cloud providers and external drives.
  </p>

  <p>
  I don't really care about where or how the data itself is stored and I
  treat the <code>org-attach</code> directory as an opaque "blob"
  store<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>.
  This works 99% of the time because I usually want to find the file
  where I have some vague semantic idea of what it is and usually find
  it via org interface and then open the attachment.
  </p>

  <p>
  For the rare cases I can't figure out where I stored a file, I use the
  usual <code>locate</code> or <code>find</code> utilities.  When I finally get to the dired
  buffer for this attachment, I usually want to visit its corresponding
  headline to either add more keywords or somehow make it easier to find
  this file again through the org interface.
  </p>

  <p>
  So I wrote this simple utility function to jump back to the headline
  to edit it:
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-org-attach-visit-headline-from-dired</span> <span style="color: #888a85;">()</span>
  <span style="color: #e9b96e;">"Go to the headline corresponding to this org-attach directory."</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">interactive</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let*</span> <span style="color: #888a85;">((</span>id-parts <span style="color: #888a85;">(</span>last <span style="color: #888a85;">(</span>split-string default-directory <span style="color: #e9b96e;">"/"</span> t<span style="color: #888a85;">)</span> 2<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>id <span style="color: #888a85;">(</span>apply <span style="color: #8cc4ff;">#'concat</span> id-parts<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>m <span style="color: #888a85;">(</span>org-id-find id <span style="color: #e6a8df;">'marker</span><span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">unless</span> m <span style="color: #888a85;">(</span><span style="color: #ff4b4b;">user-error</span> <span style="color: #e9b96e;">"Cannot find entry with ID \"%s\""</span> id<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>pop-to-buffer <span style="color: #888a85;">(</span>marker-buffer m<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>goto-char m<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>move-marker m nil<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-fold-show-context<span style="color: #888a85;">))))</span>
  </pre>
  </div>

  <p>
  Bind this to some <a href="https://github.com/Fuco1/free-keys">free key</a> in the dired mode map and you can jump back and forth with ease.
  </p>
  ]]></description>
</item>

<item>
  <title>Add fontification for progress cookie in org agenda</title>
  <link>https://fuco1.github.io/2022-01-04-Add-fontification-for-progress-cookie-in-org-agenda.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2022-01-04-Add-fontification-for-progress-cookie-in-org-agenda.html</guid>
  <pubDate>Tue, 04 Jan 2022 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  In Org mode, there is an easy way to visualize progress on a task with
  subtasks.  You can place a "progress cookie" <code>[/]</code> or <code>[%]</code> in the title
  of a TODO task or parent item in a list, hit <kbd>C-c C-c</kbd> and Org will
  calculate the progress for you.
  </p>

  <div class="org-src-container">
  <pre class="src src-org"><span style="color: #fce94f;">* </span><span style="color: #ff4b4b; font-weight: bold;">TODO</span><span style="color: #fce94f;"> foo </span><span style="color: #e6a8df; font-weight: bold;">[1/3]</span>
  <span style="color: #2e3436;">*</span><span style="color: #fcaf3e;">* </span><span style="color: #ff4b4b; font-weight: bold;">TODO</span><span style="color: #fcaf3e;"> one</span>
  <span style="color: #2e3436;">*</span><span style="color: #fcaf3e;">* </span><span style="color: #ff4b4b; font-weight: bold;">TODO</span><span style="color: #fcaf3e;"> two</span>
  <span style="color: #2e3436;">*</span><span style="color: #fcaf3e;">* </span><span style="color: #73d216; font-weight: bold;">DONE</span><span style="color: #fcaf3e;"> </span><span style="color: #888a85;">three</span>
  <span style="color: #8cc4ff; font-weight: bold;">- </span>parent <span style="color: #e6a8df; font-weight: bold;">[66%]</span>
  <span style="color: #888a85; font-weight: bold;">  </span><span style="color: #888a85; font-weight: bold;">- </span><span style="color: #888a85; font-weight: bold;">[X]</span><span style="color: #888a85;"> one</span>
  <span style="color: #888a85; font-weight: bold;">  </span><span style="color: #888a85; font-weight: bold;">- </span><span style="color: #888a85; font-weight: bold;">[X]</span><span style="color: #888a85;"> two</span>
  <span style="color: #8cc4ff; font-weight: bold;">  </span><span style="color: #8cc4ff; font-weight: bold;">- </span><span style="color: #8cc4ff; font-weight: bold;">[ ]</span> three
  </pre>
  </div>

  <p>
  These are fontified with <code>org-checkbox-statistics-todo</code> to make them
  easily stand out.  However, for some reason this face is not applied
  in the Org agenda buffer.
  </p>

  <p>
  Because the agenda buffer does not use font-lock for fontifying and
  instead inserts already fontified text in the buffer directly, we
  can't simply add a regexp with <code>font-lock-add-keywords</code>.  But the
  solution is nonetheless very straight-forward.  Create a function
  which will search for the regexp in the buffer and add the face text
  property.  Then add it to the <code>org-agenda-finalize-hook</code> and that's
  that!
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-fontify-progress-cookie</span> <span style="color: #888a85;">()</span>
  <span style="color: #e9b96e;">"Fontify progress cookies in org agenda."</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">save-excursion</span>
  <span style="color: #888a85;">(</span>goto-char <span style="color: #888a85;">(</span>point-min<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">while</span> <span style="color: #888a85;">(</span>re-search-forward <span style="color: #e9b96e;">"\\[[[:digit:]]+/[[:digit:]]+\\]"</span> nil t<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>add-face-text-property <span style="color: #888a85;">(</span>match-beginning 0<span style="color: #888a85;">)</span> <span style="color: #888a85;">(</span>match-end 0<span style="color: #888a85;">)</span>
  <span style="color: #e6a8df;">'org-checkbox-statistics-todo</span><span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>goto-char <span style="color: #888a85;">(</span>point-min<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">while</span> <span style="color: #888a85;">(</span>re-search-forward <span style="color: #e9b96e;">"\\[[[:digit:]]+%\\]"</span> nil t<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>add-face-text-property <span style="color: #888a85;">(</span>match-beginning 0<span style="color: #888a85;">)</span> <span style="color: #888a85;">(</span>match-end 0<span style="color: #888a85;">)</span>
  <span style="color: #e6a8df;">'org-checkbox-statistics-todo</span><span style="color: #888a85;">))))</span>

  <span style="color: #888a85;">(</span>add-hook <span style="color: #e6a8df;">'org-agenda-finalize-hook</span> <span style="color: #e6a8df;">'my-fontify-progress-cookie</span><span style="color: #888a85;">)</span>
  </pre>
  </div>
  ]]></description>
</item>

<item>
  <title>Restrict agenda to multiple subtrees</title>
  <link>https://fuco1.github.io/2021-05-29-Restrict-agenda-to-multiple-subtrees.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2021-05-29-Restrict-agenda-to-multiple-subtrees.html</guid>
  <pubDate>Sat, 29 May 2021 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  The function <code>org-agenda-set-restriction-lock</code> is very useful for
  speeding up agenda when working on a specific project (implemented as
  a file or an Orgmode subtree).  Personally, I use two agenda views,
  one "quick" with 5 simple sections and one "full" with 10 rather
  complicated sections.
  </p>

  <p>
  The quick one lists all the actionable tasks, all the stuck tasks or
  notes that need to be processed and refiled.  The full one lists all
  the tasks from the project, including hierarchical project
  dependencies, tasks on hold, bugs, waiting tasks and so on.  The full
  view takes a lot more processing power and is not useful maybe 80% of
  the time when I simply want to find work to do next.
  </p>

  <p>
  For the times when I want to get a complete overview over a project
  and do some light management or planning, I use the full agenda view.
  </p>

  <p>
  One thing that kept bothering me was that the only option was to
  restrict to a file or a subtree, but nothing in
  between<sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup>, such as a
  region spanning multiple subtrees.  Since I'm not a huge fan of
  nesting headers just for the sake of nesting (flatter structures and
  <a href="https://github.com/Fuco1/org-node-graph">graphs</a> are much nicer for organization).
  </p>

  <p>
  Luckily, the function <code>org-agenda-set-restriction-lock</code> is fairly
  hackable.  It uses overlays and markers for managing the restriction,
  so all we need to do is grab the current active region's bounds and
  set the org variables appropriately.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-org-agenda-set-restriction-lock</span> <span style="color: #888a85;">(</span>orig-fun <span style="color: #8cc4ff;">&amp;optional</span> type<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">if</span> <span style="color: #888a85;">(</span>not <span style="color: #888a85;">(</span>use-region-p<span style="color: #888a85;">))</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">unless a region is active, use the original function for</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">cancel/file/subtree</span>
  <span style="color: #888a85;">(</span>funcall orig-fun type<span style="color: #888a85;">)</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">here we do approximately the same as subtree except find the</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">beginning of subtree at region's beginning and end of subtree</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">at region's end (could span multiple subtrees)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> org-agenda-restrict <span style="color: #888a85;">(</span>current-buffer<span style="color: #888a85;">))</span>
  <span style="color: #73d216;">;; </span><span style="color: #73d216;">use 'my-region to avoid potential future conflict</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> org-agenda-overriding-restriction <span style="color: #e6a8df;">'my-region</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>put <span style="color: #e6a8df;">'org-agenda-files</span> <span style="color: #e6a8df;">'org-restrict</span>
  <span style="color: #888a85;">(</span>list <span style="color: #888a85;">(</span>buffer-file-name <span style="color: #888a85;">(</span>buffer-base-buffer<span style="color: #888a85;">))))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>beg <span style="color: #888a85;">(</span>region-beginning<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>end <span style="color: #888a85;">(</span>region-end<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">save-excursion</span>
  <span style="color: #888a85;">(</span>goto-char beg<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-back-to-heading t<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> beg <span style="color: #888a85;">(</span>point<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">save-excursion</span>
  <span style="color: #888a85;">(</span>goto-char end<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-end-of-subtree t t<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> end <span style="color: #888a85;">(</span>point<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span>move-overlay org-agenda-restriction-lock-overlay
  beg
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">if</span> org-agenda-restriction-lock-highlight-subtree
  end
  <span style="color: #888a85;">(</span>point-at-eol<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span>move-marker org-agenda-restrict-begin beg<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>move-marker org-agenda-restrict-end end<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>message <span style="color: #e9b96e;">"Locking agenda restriction to region"</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-agenda-maybe-redo<span style="color: #888a85;">)))</span>

  <span style="color: #888a85;">(</span>advice-add <span style="color: #e6a8df;">'org-agenda-set-restriction-lock</span> <span style="color: #ad7fa8;">:around</span> <span style="color: #8cc4ff;">#'my-org-agenda-set-restriction-lock</span><span style="color: #888a85;">)</span>
  </pre>
  </div>
  ]]></description>
</item>

<item>
  <title>Refiling hydra with pre-defined targets</title>
  <link>https://fuco1.github.io/2019-02-10-Refiling-hydra-with-pre-defined-targets.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2019-02-10-Refiling-hydra-with-pre-defined-targets.html</guid>
  <pubDate>Sun, 10 Feb 2019 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  I'm a heavy <code>org-capture</code> user and I use about 10 templates to save the
  ideas/tasks to appropriate places (work / life / emacs / other
  projects / reading...).  Sometimes, however, it is quite difficult to
  determine at the time of capture where to put the note, or it would
  take a lot of time to categorize properly... or sometimes I'm just
  lazy.  For these situations I use a general <code>refile.org</code> file.  Anything
  I don't want to deal with right now goes there.
  </p>

  <p>
  Then I often end up with 200+ notes in this file and I have to deal
  with it somehow during my weekly reviews.  Many items I simply delete,
  but some I refine and then refile away to where they belong.
  </p>

  <p>
  I use about 10 huge org files to store my data and simply calling
  <code>org-refile</code> is very slow and the number of targets grows into tens of
  thousands which makes the experience sub-optimal.
  </p>

  <p>
  I've written a simple Elisp <code>defmacro</code> to generate specialized versions
  of <code>org-refile</code> where I can limit the targets to one file or a subset of
  files.  This is done by <code>let</code>-binding <code>org-refine-targets</code> variable and
  then calling <code>org-refile</code>---it will pick up the new setting.  I also
  automatically clear the cache because during this process I often add
  or move headlines around and the cache is most of the time stale.  In
  practice it's not a problem because refiling to just one file is
  fast-enough to rebuild the cache on-the-go.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defmacro</span> <span style="color: #fce94f;">my-org-make-refile-command</span> <span style="color: #888a85;">(</span>fn-suffix refile-targets<span style="color: #888a85;">)</span>
  <span style="color: #e9b96e;">"Generate a command to call `</span><span style="color: #e6a8df;">org-refile</span><span style="color: #e9b96e;">' with modified targets."</span>
  `<span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> ,<span style="color: #888a85;">(</span>intern <span style="color: #888a85;">(</span>concat <span style="color: #e9b96e;">"my-org-refile-"</span> <span style="color: #888a85;">(</span>symbol-name fn-suffix<span style="color: #888a85;">)))</span> <span style="color: #888a85;">()</span>
  ,<span style="color: #888a85;">(</span>format <span style="color: #e9b96e;">"`</span><span style="color: #e6a8df;">org-refile</span><span style="color: #e9b96e;">' to %S"</span> refile-targets<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">interactive</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-refile-cache-clear<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>org-refile-target-verify-function nil<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-refile-targets ,refile-targets<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>call-interactively <span style="color: #e6a8df;">'org-refile</span><span style="color: #888a85;">))))</span>
  </pre>
  </div>

  <p>
  It's quite straight-forward, we have a <code>defun</code> skeleton and we splice
  the name and the target there.  The expansion looks like this
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">my-org-make-refile-command</span> kb '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"~/data/documents/kb.org"</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">)))</span>

  <span style="color: #73d216;">;; </span><span style="color: #73d216;">expands to</span>

  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-org-refile-kb</span> nil
  <span style="color: #e9b96e;">"`</span><span style="color: #e6a8df;">org-refile</span><span style="color: #e9b96e;">' to (quote ((\"~/data/documents/kb.org\" :maxlevel . 9)))"</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">interactive</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-refile-cache-clear<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span>
  <span style="color: #888a85;">((</span>org-refile-target-verify-function nil<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-refile-targets
  '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"~/data/documents/kb.org"</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">))))</span>
  <span style="color: #888a85;">(</span>call-interactively <span style="color: #e6a8df;">'org-refile</span><span style="color: #888a85;">)))</span>
  </pre>
  </div>

  <p>
  Throw in a cool <a href="https://github.com/abo-abo/hydra">hydra</a> and you're all set!
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">my-org-make-refile-command</span> kb '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"~/data/documents/kb.org"</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">my-org-make-refile-command</span> reading '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"~/org/reading.org"</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">my-org-make-refile-command</span> this-file `<span style="color: #888a85;">((</span>,<span style="color: #888a85;">(</span>buffer-file-name<span style="color: #888a85;">)</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">)))</span>

  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">defhydra</span> <span style="color: #8cc4ff;">my-org-refile-hydra</span> <span style="color: #888a85;">(</span><span style="color: #ad7fa8;">:color</span> blue <span style="color: #ad7fa8;">:hint</span> nil<span style="color: #888a85;">)</span>
  <span style="color: #e9b96e;">"</span>
  <span style="color: #e9b96e;">_t_his file</span>

  <span style="color: #e9b96e;">Special files:</span>
  <span style="color: #e9b96e;">---------------------</span>
  <span style="color: #e9b96e;">_k_b.org    _r_eading.org"</span>
  <span style="color: #888a85;">(</span><span style="color: #e9b96e;">"k"</span> my-org-refile-kb<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #e9b96e;">"r"</span> my-org-refile-reading<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #e9b96e;">"t"</span> my-org-refile-this-file<span style="color: #888a85;">))</span>

  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">bind-key</span> <span style="color: #e9b96e;">"C-c r"</span> <span style="color: #8cc4ff;">#'my-org-refile-hydra/body</span> org-mode-map<span style="color: #888a85;">)</span>
  </pre>
  </div>
  ]]></description>
</item>

<item>
  <title>Org mode and google calendar sync</title>
  <link>https://fuco1.github.io/2019-02-02-Org-mode-and-google-calendar-sync.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2019-02-02-Org-mode-and-google-calendar-sync.html</guid>
  <pubDate>Sat, 02 Feb 2019 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  As a contractor working for multiple clients I juggle many projects
  and meetings all the time.  Fortunately for me, there is <a href="https://orgmode.org/">orgmode</a>.
  Unfortunately, my clients have not yet learned to appreciate its
  merits.  Fortunately though, they all use the GSuite platform from
  Google, which means agendas are planned in Google Calendars.
  </p>

  <p>
  So I finally bit the bullet and decided to integrate Google Calendar
  into my org agenda.  I didn't have to go a long way before finding
  <a href="https://github.com/kidd/org-gcal.el">org-gcal.el</a>.
  </p>

  <p>
  My setup is taken mostly from <a href="https://cestlaz.github.io/posts/using-emacs-26-gcal/">Using Emacs - 26 - Google Calendar, Org
  Agenda</a> by the amazing Mike Zamansky.  One difference from Mike's setup
  is that I'm using a single-way sync only, that is I only fetch from
  google calendar and do not publish anything.
  </p>

  <p>
  The reason is that I use multiple calendars (I basically have a google
  account at every company I work for plus a personal calendar) and the
  workflow with events and inviting myself from one calendar to another
  as attendees is too complex and fragile to trust some automated tool.
  And I can not afford my calendars to break.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">use-package</span> <span style="color: #e6a8df;">org-gcal</span>
  <span style="color: #ad7fa8;">:after</span> org
  <span style="color: #ad7fa8;">:config</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> org-gcal-client-id <span style="color: #e9b96e;">"781554523097-ocjovnfpqgtpoc4qv7ubr8c679t96bv7.apps.googleusercontent.com"</span>
  org-gcal-client-secret <span style="color: #e9b96e;">"&lt;&lt;gcal-secret&gt;&gt;"</span>
  org-gcal-file-alist '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"matus.goljer@gmail.com"</span> . <span style="color: #e9b96e;">"~/org/gcal.org"</span><span style="color: #888a85;">))</span>
  org-gcal-header-alist '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"matus.goljer@gmail.com"</span> . <span style="color: #e9b96e;">"#+PROPERTY: TIMELINE_FACE \"pink\"\n"</span><span style="color: #888a85;">))</span>
  org-gcal-auto-archive nil
  org-gcal-notify-p nil<span style="color: #888a85;">)</span>

  <span style="color: #888a85;">(</span>add-hook <span style="color: #e6a8df;">'org-agenda-mode-hook</span> <span style="color: #e6a8df;">'org-gcal-fetch</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>add-hook <span style="color: #e6a8df;">'org-capture-after-finalize-hook</span> <span style="color: #e6a8df;">'org-gcal-fetch</span><span style="color: #888a85;">))</span>
  </pre>
  </div>

  <p>
  I'm also using <a href="https://github.com/Fuco1/org-timeline">org-timeline</a> so I add some extra header arguments to
  the generated file to add a different color to the Google Calendar
  entries.
  </p>
  ]]></description>
</item>

<item>
  <title>Use the input method from original org buffer in log note buffer</title>
  <link>https://fuco1.github.io/2019-01-23-Use-the-input-method-from-original-org-buffer-in-log-note-buffer.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2019-01-23-Use-the-input-method-from-original-org-buffer-in-log-note-buffer.html</guid>
  <pubDate>Wed, 23 Jan 2019 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  On switching various TODO states I've set up org mode to pop a buffer
  for <a href="https://orgmode.org/manual/Tracking-TODO-state-changes.html">attaching a quick note or explanation</a>.  You can do this also for
  refiling, clocking in or out, rescheduling and so on.
  </p>

  <p>
  I don't use these logs very often in a review or retrospective but it
  helped me a bunch of times to figure out the circumstances of my past
  actions (e.g. rescheduling, postponing work etc.) so I find it worth
  to spend 30 seconds jotting down a simple note as opposed to then
  trying to figure out everything from scratch for hours.
  </p>

  <p>
  Especially useful for when you are not meeting client's
  deadlines. Papertrail is good!
  </p>

  <p>
  Also being a daily journalist and somewhat obsessive about tracking my
  life my settings here are pretty aggressive.
  </p>

  <p>
  One thing that buggs me is, being not a native English speaker, is
  that when <code>org-mode</code> pops the note buffer its input method resets to
  English.  Given the fact that the past and current org maintainers
  also don't speak English as a first language kind of led me to expect
  there to be some setting to inherit the input method of the original
  buffer<sup><a id="fnr.3" class="footref" href="#fn.3" role="doc-backlink">3</a></sup>.  Sadly, I
  couldn't find it, so I decided to "roll my own".
  </p>

  <p>
  Now here comes the part that blew my mind... I've realized I wrote the
  whole code in under 2 minutes... where simply trying to read the
  manual and search the code would easily take more
  time<sup><a id="fnr.4" class="footref" href="#fn.4" role="doc-backlink">4</a></sup>.  This is the nice feature of being an Emacs power-user.  I
  wrote the code on the first try, registered it in a hook which name
  I've guessed and it all worked flawlessly.  Nice!
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-org-inherit-input-method</span> <span style="color: #888a85;">()</span>
  <span style="color: #e9b96e;">"Set the input method of this buffer to that of original's buffer."</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let*</span> <span style="color: #888a85;">((</span>note-buffer <span style="color: #888a85;">(</span>marker-buffer org-log-note-marker<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>im <span style="color: #888a85;">(</span><span style="color: #b4fa70;">with-current-buffer</span> note-buffer
  current-input-method<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span>set-input-method im<span style="color: #888a85;">)))</span>

  <span style="color: #888a85;">(</span>add-hook <span style="color: #e6a8df;">'org-log-buffer-setup-hook</span> <span style="color: #e6a8df;">'my-org-inherit-input-method</span><span style="color: #888a85;">)</span>
  </pre>
  </div>

  <p>
  Of course, I've spent thousands of hours learning Elisp, so I'm not
  sure where or when the time/productivity curves actually crossed.
  </p>
  ]]></description>
</item>

<item>
  <title>Make agenda clockreport respect =org-extend-today-until=</title>
  <link>https://fuco1.github.io/2019-01-03-Make-agenda-clockreport-respect-=org-extend-today-until=.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2019-01-03-Make-agenda-clockreport-respect-=org-extend-today-until=.html</guid>
  <pubDate>Thu, 03 Jan 2019 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  There's a cool but little known <a href="https://orgmode.org/">org-mode</a> setting for all the the night
  owls out there called <code>org-extend-today-until</code>.  It does quite what you
  would expect: you can tell org-mode when your "logical" midnight is.
  For me, I rarely go to sleep before 12 pm so I set it to 4 am just to
  be sure.  This way even if it's already 0:15 and I refresh the agenda
  view it still displays "yesterday".
  </p>

  <p>
  The trouble is that not a lot of org mode actually respects this
  setting, so far the only things mentioned in the docstring are the
  agenda day switch and something related to reading dates from the user
  (I think through <code>C-c .</code>) but I can't see any difference in that.  If
  you are using the org modeline and summary clock for today's time
  spent on a task this will also only count contributions from the
  specified hour which is nice.  There is probably more but I haven't
  noticed yet.
  </p>

  <p>
  Since I'm an <code>org-agenda-clockreport-mode</code> I want to have that
  consistent with the modeline information.  However it goes through
  entirely different machinery and so the easiest extension point is
  simply put an advice on the function which collects the data
  (<code>org-clock-get-table-data</code>) and in case we are working in the agenda
  scope adjust the <code>:tstart</code> and <code>:tend</code> properties to respect
  <code>org-extend-today-until</code>.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-convert-org-today-to-timestamp</span> <span style="color: #888a85;">(</span>ts<span style="color: #888a85;">)</span>
  <span style="color: #e9b96e;">"Convert TS to timestamp.</span>

  <span style="color: #e9b96e;">TS is an absolute number of days since 0001-12-31bce</span>

  <span style="color: #e9b96e;">The timestamp returned is in the format YYYY-MM-DD hh:mm.  The</span>
  <span style="color: #e9b96e;">hour is adjusted according to `</span><span style="color: #e6a8df;">org-extend-today-until</span><span style="color: #e9b96e;">'."</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>ts-greg <span style="color: #888a85;">(</span>calendar-gregorian-from-absolute ts<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span>format <span style="color: #e9b96e;">"%4d-%02d-%02d %02d:00"</span>
  <span style="color: #888a85;">(</span>nth 2 ts-greg<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>car ts-greg<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>nth 1 ts-greg<span style="color: #888a85;">)</span>
  org-extend-today-until<span style="color: #888a85;">)))</span>

  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-org-clock-get-table-data-adjust-start</span> <span style="color: #888a85;">(</span>origfun file params<span style="color: #888a85;">)</span>
  <span style="color: #e9b96e;">"Adjust the start and end arguments to respect `</span><span style="color: #e6a8df;">org-extend-today-until</span><span style="color: #e9b96e;">'."</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">when</span> <span style="color: #888a85;">(</span><span style="color: #b4fa70;">and</span> <span style="color: #888a85;">(</span>eq <span style="color: #888a85;">(</span>plist-get params <span style="color: #ad7fa8;">:scope</span><span style="color: #888a85;">)</span> <span style="color: #e6a8df;">'agenda</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>integerp <span style="color: #888a85;">(</span>plist-get params <span style="color: #ad7fa8;">:tstart</span><span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>ts <span style="color: #888a85;">(</span>my-convert-org-today-to-timestamp <span style="color: #888a85;">(</span>plist-get params <span style="color: #ad7fa8;">:tstart</span><span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span>te <span style="color: #888a85;">(</span>my-convert-org-today-to-timestamp <span style="color: #888a85;">(</span>plist-get params <span style="color: #ad7fa8;">:tend</span><span style="color: #888a85;">))))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> params <span style="color: #888a85;">(</span>plist-put params <span style="color: #ad7fa8;">:tstart</span> ts<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> params <span style="color: #888a85;">(</span>plist-put params <span style="color: #ad7fa8;">:tend</span> te<span style="color: #888a85;">))))</span>
  <span style="color: #888a85;">(</span>funcall origfun file params<span style="color: #888a85;">))</span>

  <span style="color: #888a85;">(</span>advice-add <span style="color: #e6a8df;">'org-clock-get-table-data</span> <span style="color: #ad7fa8;">:around</span> <span style="color: #8cc4ff;">#'my-org-clock-get-table-data-adjust-start</span><span style="color: #888a85;">)</span>
  </pre>
  </div>

  <p>
  Recently I've been adding some nice improvements to my <a href="https://github.com/Fuco1/org-timeline">org-timeline</a>
  package which draws a visual representation of all the
  scheduled/clocked items (see README for visuals).  I'll make sure it
  respects this setting as well.  So far I've instinctively set it to
  start drawing at 5:00.
  </p>
  ]]></description>
</item>

<item>
  <title>Multiline fontification with org-emphasis-alist</title>
  <link>https://fuco1.github.io/2018-12-23-Multiline-fontification-with-org-emphasis-alist.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2018-12-23-Multiline-fontification-with-org-emphasis-alist.html</guid>
  <pubDate>Sun, 23 Dec 2018 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  By default org mode only fontifies spans of text wrapped in emphasis
  markers (customized with <code>org-emphasis-alist</code>) if they extend through at
  most one newline.  This is probably a performance optimization, one
  wholly unnecessary on modern hardware.
  </p>

  <p>
  As per this <a href="https://emacs.stackexchange.com/questions/18101/org-mode-multi-line-emphasis-and-bold">stack overflow</a> post I re-set the constant to 10 lines and
  can probably even increase it if necessary.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span>setcar <span style="color: #888a85;">(</span>nthcdr 4 org-emphasis-regexp-components<span style="color: #888a85;">)</span> 10<span style="color: #888a85;">)</span>
  </pre>
  </div>

  <p>
  Before this starts to work you need to re-save <code>org-emphasis-alist</code>
  through the customize interface because it is using a custom setter
  <code>org-set-emph-re</code> to compute the regexpses (or, <i><b>gulp</b></i>, restart Emacs).
  </p>

  <p>
  Here I quote the answer in case it ever gets lost:
  </p>

  <div class="org-src-container">
  <pre class="src src-markdown">By default, org-mode allows a single newline. So if you want to be
  able to add markup to text that spans more than two consecutive lines,
  you'll need to modify this entry.

  <span style="color: #e6a8df; background-color: #232a2b;">    (setcar (nthcdr 4 org-emphasis-regexp-components) N)</span>

  ... where N is the number of newlines you want to allow.
  </pre>
  </div>
  ]]></description>
</item>

<item>
  <title>WAR STORY: When turning to the profiler turns out to be a good call</title>
  <link>https://fuco1.github.io/2018-08-12-WAR-STORY:-When-turning-to-the-profiler-turns-out-to-be-a-good-call.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2018-08-12-WAR-STORY:-When-turning-to-the-profiler-turns-out-to-be-a-good-call.html</guid>
  <pubDate>Sun, 12 Aug 2018 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  Some of you might have seen the little bit of news circulating around
  about my new project.  It's called <a href="https://github.com/Fuco1/Elsa">Elsa</a> (stands for Emacs Lisp Static
  Analyzer), which is exactly what you would expect: you throw it some
  Elisp code and it analyzes the types, dead code, style and all sorts
  of other rules (stars are the limit!).
  </p>

  <p>
  I've been working on this "secretly" in public (the repo was on Github
  from day 1.) for about a year and very early on I've made a couple
  decisions that I now thought doomed me to failure.  These were:
  </p>

  <ul class="org-ul">
  <li>I will use <a href="https://www.gnu.org/s/emacs/manual/html_node/eieio/">EIEIO</a> to represent the reader forms and types</li>
  <li>I will use CL <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Generic-Functions.html">generics</a> to process these objects</li>
  </ul>

  <p>
  For this kind of a problem where we are walking some recursive
  structure and then doing some "arithmetics" on hierarchies of types,
  classes and methods are a very natural choice.  You can write generic
  implementations and then "pattern match" on specific classes to
  provide more elaborate strategies.
  </p>

  <p>
  These two were notoriously known for having very bad performance in
  the past, but nonetheless I decided that the simplicity of the
  implementation has higher priority for me now and that in the worst
  case I can transform it into a manual-dispatch-conds-and-defuns later.
  </p>

  <p>
  EIEIO in particular was also known to be quite undebuggable.  They did
  a good job on it with the 25 release and the error messages are now
  pretty helpful.  It's no worse than the rest of Emacs (<code>M-x
  faint-praise</code>).
  </p>

  <p>
  When I finally finished the reader module which turns the source file
  into a tree of EIEIO objects, to my horror I found out that it was
  indeed slow. <b>Way slow</b>. I was using <a href="https://github.com/Fuco1/smartparens/blob/master/smartparens.el">smartparens.el</a> as a benchmark: it's
  a single lisp file package of about 10000 lines with enough complexity
  to inhibit most of the features of Elisp.
  </p>

  <p>
  It took 42 seconds to analyze.  That is not great when you want to use
  it with something like <a href="http://www.flycheck.org/en/latest/">flycheck</a>.  So I'm pretty much thinking I'm
  screwed at this point and begin thinking about how to get rid of the
  generics, because obviously <i>that</i> must be the issue, right?
  </p>

  <p>
  Oh, how wrong I was.  Finally in a stroke of genius I fired up an
  <code>emacs -nw -q</code>, loaded all the necessary things and did <code>M-x
  profiler-start</code>.
  </p>

  <p>
  Then I run the analysis in that instance, get the report and get my
  mind blown to pieces: the culprit was the little innocent looking
  function <code>line-number-at-pos</code>.  The reader spent about 90% of all the
  time inside that function.
  </p>

  <p>
  What happened?  Every time I read any form I need to remember the line
  and column it was encountered at for error reporting to the user
  later.  So every time I read anything (a symbol, a list, a keyword, a
  string) I would call <code>line-number-at-pos</code> with the token's start
  position to get the line number.
  </p>

  <p>
  What this function does is it jumps to the first line of the file,
  then regexp searches for <code>\n</code> until it reaches the <code>point</code> from which it
  was called.
  </p>

  <p>
  So you can imagine, in your source code on line <code>8500</code>, a form like
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span>very innocent looking form at line 8500<span style="color: #888a85;">)</span>
  </pre>
  </div>

  <p>
  would trigger 8 calls to <code>line-number-at-pos</code> which would in turn do
  68000 regexp searches for <code>\n</code>.  The total number of these went way up
  in the lower hundreds of millions, somewhere around the marks of 400
  to 500 million calls.  Now that's <i>a lot</i> of completely useless
  computation.
  </p>

  <p>
  So what I did to fix this?  At the beginning of the analysis I run
  through all the lines and place a text property <code>elsa-line</code> on the first
  character with the line number.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span>goto-char <span style="color: #888a85;">(</span>point-min<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>line 1<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>put-text-property <span style="color: #888a85;">(</span>point<span style="color: #888a85;">)</span> <span style="color: #888a85;">(</span>1+ <span style="color: #888a85;">(</span>point<span style="color: #888a85;">))</span> <span style="color: #e6a8df;">'elsa-line</span> line<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">while</span> <span style="color: #888a85;">(</span>= <span style="color: #888a85;">(</span>forward-line<span style="color: #888a85;">)</span> 0<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">cl-incf</span> line<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>put-text-property <span style="color: #888a85;">(</span>point<span style="color: #888a85;">)</span> <span style="color: #888a85;">(</span>min
  <span style="color: #888a85;">(</span>buffer-size<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>1+ <span style="color: #888a85;">(</span>point<span style="color: #888a85;">)))</span> <span style="color: #ff4b4b;">'elsa-line line</span><span style="color: #ff4b4b;">)))</span>
  </pre>
  </div>

  <p>
  Then to get the line number all I need to do is
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span>get-text-property <span style="color: #888a85;">(</span>line-beginning-position<span style="color: #888a85;">)</span> <span style="color: #e6a8df;">'elsa-line</span><span style="color: #888a85;">)</span>
  </pre>
  </div>

  <p>
  Because the text properties use efficient data structures this access
  is really really fast (something like <code>O(log n)</code> in length of buffer).
  </p>

  <p>
  With this little change, the analysis time dropped to 5 seconds,
  almost a factor of 10!  So the moral of the story is, as has been
  repeated to death, when in trouble always bring out the big guns:
  profilers are our friends!  No way in the world I would've guessed
  this function was responsible (I actually started changing a bunch of
  code into <code>defsubst</code> and inlining code before I figured that's
  completely bonkers).
  </p>

  <p>
  On a closing note, I'm looking for people to help out on the project,
  there is a lot of things for people of all skill ranging from
  beginners to seasoned hackers.  Check out issues marked <a href="https://github.com/Fuco1/Elsa/issues?q=is%253Aissue+is%253Aopen+label%253A%2522help+wanted%2522">help wanted</a> or
  <a href="https://github.com/Fuco1/Elsa/issues?q=is%253Aissue+is%253Aopen+label%253A%2522good+first+issue%2522">good first issue</a> and get involved!  If anything's unclear go ahead and
  ask questions.
  </p>
  ]]></description>
</item>
<div id="footnotes">
  <h2 class="footnotes">Footnotes: </h2>
  <div id="text-footnotes">

    <div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">This really removed a lot of "create a
    perfect file hierarchy" anxiety that ultra-orderly people like me get
    all the time.  I am no longer slave to the perpetual fine-tuning of
    what is nested where.  The files on the disk are actually stored in a
    flat two-level hierarchy determined by some hash or uuid.  This is
    great!  And the semantics of what the file is and how to find it is
    delegated to org mode.  This is even greater because its metadata are
    so much ritcher than what you can store in the file system itself.</p></div></div>

    <div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">While it is possible to restrict to a
    region from the org-agenda speed dial, I find it quite impractical and
    prefer to do the restrictions from the project's buffer</p></div></div>

    <div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">And really, 99% of the time, when you say "I'm
    going to write an org-extension", it already is in core.</p></div></div>

    <div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4" role="doc-backlink">4</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">This is not the greatest engineering and you
    should almost always prefer a well-tested lib over your own... on the
    other hand, being a pragmatic professional, I value my time over code
    purity</p></div></div>


  </div>
</div></channel>
</rss>