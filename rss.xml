<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Matus Goljer (Fuco1)</title>
  <atom:link href="https://fuco1.github.io/rss.xml" rel="self" type="application/rss+xml" />
  <link>https://fuco1.github.io/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Sat, 29 May 2021 15:10:20 +0200</pubDate>
  <lastBuildDate>Sat, 29 May 2021 15:10:20 +0200</lastBuildDate>
  <generator>Emacs 26.1 Org-mode 9.2.1</generator>
  <webMaster>matus.goljer@gmail.com (Matúš Goljer)</webMaster>
  <image>
    <url>https://orgmode.org/img/org-mode-unicorn-logo.png</url>
    <title>Matus Goljer (Fuco1)</title>
    <link>https://fuco1.github.io/</link>
  </image>

  <item>
    <title>Restrict agenda to multiple subtrees</title>
    <link>https://fuco1.github.io/2021-05-29-Restrict-agenda-to-multiple-subtrees.html</link>
    <author>matus.goljer@gmail.com (Matúš Goljer)</author>
    <guid isPermaLink="false">https://fuco1.github.io/2021-05-29-Restrict-agenda-to-multiple-subtrees.html</guid>
    <pubDate>Sat, 29 May 2021 00:00:00 +0200</pubDate>

    <description><![CDATA[<p>
    The function <code>org-agenda-set-restriction-lock</code> is very useful for
    speeding up agenda when working on a specific project (implemented as
    a file or an Orgmode subtree).  Personally, I use two agenda views,
    one "quick" with 5 simple sections and one "full" with 10 rather
    complicated sections.
    </p>

    <p>
    The quick one lists all the actionable tasks, all the stuck tasks or
    notes that need to be processed and refiled.  The full one lists all
    the tasks from the project, including hierarchical project
    dependencies, tasks on hold, bugs, waiting tasks and so on.  The full
    view takes a lot more processing power and is not useful maybe 80% of
    the time when I simply want to find work to do next.
    </p>

    <p>
    For the times when I want to get a complete overview over a project
    and do some light management or planning, I use the full agenda view.
    </p>

    <p>
    One thing that kept bothering me was that the only option was to
    restrict to a file or a subtree, but nothing in
    between<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>, such as a
    region spanning multiple subtrees.  Since I'm not a huge fan of
    nesting headers just for the sake of nesting (flatter structures and
    <a href="https://github.com/Fuco1/org-node-graph">graphs</a> are much nicer for organization).
    </p>

    <p>
    Luckily, the function <code>org-agenda-set-restriction-lock</code> is fairly
    hackable.  It uses overlays and markers for managing the restriction,
    so all we need to do is grab the current active region's bounds and
    set the org variables appropriately.
    </p>

    <div class="org-src-container">
    <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-org-agenda-set-restriction-lock</span> <span style="color: #888a85;">(</span>orig-fun <span style="color: #8cc4ff;">&amp;optional</span> type<span style="color: #888a85;">)</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">if</span> <span style="color: #888a85;">(</span>not <span style="color: #888a85;">(</span>use-region-p<span style="color: #888a85;">))</span>
    <span style="color: #73d216;">;; </span><span style="color: #73d216;">unless a region is active, use the original function for</span>
    <span style="color: #73d216;">;; </span><span style="color: #73d216;">cancel/file/subtree</span>
    <span style="color: #888a85;">(</span>funcall orig-fun type<span style="color: #888a85;">)</span>
    <span style="color: #73d216;">;; </span><span style="color: #73d216;">here we do approximately the same as subtree except find the</span>
    <span style="color: #73d216;">;; </span><span style="color: #73d216;">beginning of subtree at region's beginning and end of subtree</span>
    <span style="color: #73d216;">;; </span><span style="color: #73d216;">at region's end (could span multiple subtrees)</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> org-agenda-restrict <span style="color: #888a85;">(</span>current-buffer<span style="color: #888a85;">))</span>
    <span style="color: #73d216;">;; </span><span style="color: #73d216;">use 'my-region to avoid potential future conflict</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> org-agenda-overriding-restriction <span style="color: #e6a8df;">'my-region</span><span style="color: #888a85;">)</span>
    <span style="color: #888a85;">(</span>put <span style="color: #e6a8df;">'org-agenda-files</span> <span style="color: #e6a8df;">'org-restrict</span>
    <span style="color: #888a85;">(</span>list <span style="color: #888a85;">(</span>buffer-file-name <span style="color: #888a85;">(</span>buffer-base-buffer<span style="color: #888a85;">))))</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>beg <span style="color: #888a85;">(</span>region-beginning<span style="color: #888a85;">))</span>
    <span style="color: #888a85;">(</span>end <span style="color: #888a85;">(</span>region-end<span style="color: #888a85;">)))</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">save-excursion</span>
    <span style="color: #888a85;">(</span>goto-char beg<span style="color: #888a85;">)</span>
    <span style="color: #888a85;">(</span>org-back-to-heading t<span style="color: #888a85;">)</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> beg <span style="color: #888a85;">(</span>point<span style="color: #888a85;">)))</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">save-excursion</span>
    <span style="color: #888a85;">(</span>goto-char end<span style="color: #888a85;">)</span>
    <span style="color: #888a85;">(</span>org-end-of-subtree t t<span style="color: #888a85;">)</span>
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> end <span style="color: #888a85;">(</span>point<span style="color: #888a85;">)))</span>
    <span style="color: #888a85;">(</span>move-overlay org-agenda-restriction-lock-overlay
    beg
    <span style="color: #888a85;">(</span><span style="color: #b4fa70;">if</span> org-agenda-restriction-lock-highlight-subtree
    end
    <span style="color: #888a85;">(</span>point-at-eol<span style="color: #888a85;">)))</span>
    <span style="color: #888a85;">(</span>move-marker org-agenda-restrict-begin beg<span style="color: #888a85;">)</span>
    <span style="color: #888a85;">(</span>move-marker org-agenda-restrict-end end<span style="color: #888a85;">))</span>
    <span style="color: #888a85;">(</span>message <span style="color: #e9b96e;">"Locking agenda restriction to region"</span><span style="color: #888a85;">)</span>
    <span style="color: #888a85;">(</span>org-agenda-maybe-redo<span style="color: #888a85;">)))</span>

    <span style="color: #888a85;">(</span>advice-add <span style="color: #e6a8df;">'org-agenda-set-restriction-lock</span> <span style="color: #ad7fa8;">:around</span> <span style="color: #8cc4ff;">#'my-org-agenda-set-restriction-lock</span><span style="color: #888a85;">)</span>
    </pre>
    </div>
    ]]></description>
</item>

<item>
  <title>Use org-radiobutton to select an option from a list</title>
  <link>https://fuco1.github.io/2018-03-11-Use-org-radiobutton-to-select-an-option-from-a-list.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2018-03-11-Use-org-radiobutton-to-select-an-option-from-a-list.html</guid>
  <pubDate>Sun, 11 Mar 2018 00:00:00 +0100</pubDate>

  <description><![CDATA[<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


  <colgroup>
  <col  class="org-right" />

  <col  class="org-left" />
  </colgroup>
  <thead>
  <tr>
  <th scope="col" class="org-right">Date</th>
  <th scope="col" class="org-left">Change</th>
  </tr>
  </thead>
  <tbody>
  <tr>
  <td class="org-right">2021-05-24</td>
  <td class="org-left">Since <code>org-mode</code> 9.4.0 there is a built-in <code>org-list-checkbox-radio-mode</code>.  It works very similar to this package so make sure to check it out and possibly migrate your org files.</td>
  </tr>
  </tbody>
  </table>

  <p>
  Ever since I've come across the <a href="http://howardism.org/Technical/Emacs/literate-devops.html">Literate DevOps</a> article I was hooked
  and immediately started writing down "org notebooks" every time an
  incident occured along with all the code and steps on how to fix it in
  case it might happen in the future (protip: it <i>will</i> happen again).
  </p>

  <p>
  Recently we had some problems with webhook requests behaving weird and
  so I created a little notebook to query the mongo database where we
  store all the requests and some more functions (ranging from elisp to
  jq to ruby) to process the results.  As you sure know, threading data
  between code blocks in different languages is painless with <code>org-mode</code>
  and babel.
  </p>

  <p>
  So imagine a block like this (using <a href="https://github.com/krisajenkins/ob-mongo">ob-mongo</a>):
  </p>

  <div class="org-src-container">
  <pre class="src src-org"><span style="color: #73d216;">#+NAME: query</span>
  <span style="color: #b4fa70;">#+BEGIN_SRC</span><span style="color: #73d216;"> mongo :db logs :host localhost :port 27017</span>
  <span style="background-color: #232a2b;">db.webhookLogs.find({endpoint: </span><span style="color: #e9b96e; background-color: #232a2b;">"AddCustomer"</span><span style="background-color: #232a2b;">}).sort({_id: -1}).limit(1)</span>
  <span style="color: #b4fa70;">#+END_SRC</span>
  </pre>
  </div>

  <p>
  This gives me the most recent request to the <code>AddCustomer</code> endpoint.
  The results of this block are then piped into other code blocks to
  process the request, you can imagine how that looks.
  </p>

  <p>
  Usually I run the entire app stack locally but we also have separate
  staging and production environments.  So after I run the notebook on
  my own local stack I want to try it out in staging.
  </p>

  <p>
  I use <a href="https://github.com/rejeep/prodigy.el">prodigy</a> to manage my ssh tunnels and so all I need to do is
  change the port to one pointing to staging and re-run the notebook.
  The problem is that I have multiple query blocks and so I have to go
  and change all of the <code>:port</code> arguments.
  </p>

  <p>
  I have solved this by creating a block that would work as a source for
  the port and then reference it dynamically in the header line:
  </p>

  <div class="org-src-container">
  <pre class="src src-org"><span style="color: #73d216;">#+NAME: port</span>
  <span style="color: #b4fa70;">#+BEGIN_SRC</span><span style="color: #73d216;"> elisp</span>
  <span style="background-color: #232a2b;">27017</span>
  <span style="color: #b4fa70;">#+END_SRC</span>

  <span style="color: #b4fa70;">#+NAME:</span><span style="color: #73d216;"> query</span>
  <span style="color: #b4fa70;">#+BEGIN_SRC</span><span style="color: #73d216;"> mongo :db logs :host localhost :port (org-babel-ref-resolve "port")</span>
  <span style="background-color: #232a2b;">db.webhookLogs.find({endpoint: </span><span style="color: #e9b96e; background-color: #232a2b;">"AddCustomer"</span><span style="background-color: #232a2b;">}).sort({_id: -1}).limit(1)</span>
  <span style="color: #b4fa70;">#+END_SRC</span>
  </pre>
  </div>

  <p>
  Since we can call elisp in the header I use <code>org-babel-ref-resolve</code> and
  give it the name of the source block and babel will automatically
  replace it with the value of the block.
  </p>

  <p>
  This solves the problem of changing the constant at one place but as I
  got to work with more environments I tended to forget what port was
  what.  So I created a list above the block to remind me of the
  available values:
  </p>

  <div class="org-src-container">
  <pre class="src src-org">Use one of the following ports to operate on the given environment:

  <span style="color: #8cc4ff; font-weight: bold;">- localhost ::</span> 27017
  <span style="color: #8cc4ff; font-weight: bold;">- staging ::</span> 27004
  <span style="color: #8cc4ff; font-weight: bold;">- production ::</span> 27005

  <span style="color: #b4fa70;">#+NAME:</span><span style="color: #73d216;"> port</span>
  <span style="color: #b4fa70;">#+BEGIN_SRC</span><span style="color: #73d216;"> elisp</span>
  <span style="background-color: #232a2b;">27017</span>
  <span style="color: #b4fa70;">#+END_SRC</span>

  <span style="color: #b4fa70;">#+NAME:</span><span style="color: #73d216;"> query</span>
  <span style="color: #b4fa70;">#+BEGIN_SRC</span><span style="color: #73d216;"> mongo :db logs :host localhost :port (org-babel-ref-resolve "port")</span>
  <span style="background-color: #232a2b;">db.webhookLogs.find({endpoint: </span><span style="color: #e9b96e; background-color: #232a2b;">"AddCustomer"</span><span style="background-color: #232a2b;">}).sort({_id: -1}).limit(1)</span>
  <span style="color: #b4fa70;">#+END_SRC</span>
  </pre>
  </div>

  <p>
  We can use the org mode list description syntax <code>foo ::</code> to attach a
  label to each item and leave the number as the "value".
  </p>

  <p>
  This is starting to look an awful lot like a list of choices I could
  pick from.  So my thinking goes like this: let's make it a checkbox
  list and then select the option by checking the option.  The trouble
  there is that toggling the input would require me to un-toggle the
  current one and then toggle the desired option.  Ideally, toggling one
  checkbox would uncheck the other so that there is always exactly one
  option selected: in other words, I wanted a radiobutton list.
  </p>

  <p>
  After a quick google session I've found (via <a href="http://irreal.org/blog/?p=4644">Irreal</a>) that <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/10/05/A-checkbox-list-in-org-mode-with-one-value/">John Kitchin</a>
  already figured this out.  I took his code and cleaned it up a bit to
  work with "modern" org mode (the post is three years old) and packaged
  it as <a href="https://github.com/Fuco1/org-radiobutton">org-radiobutton</a>.
  </p>

  <p>
  Now I have a nice menu I can go to and with a single <code>C-c C-c</code> on the
  option I want I can select the environment where to run the notebook.
  Org mode is so cool!
  </p>

  <div class="org-src-container">
  <pre class="src src-org">Check one of the following ports to operate on the given environment:

  <span style="color: #b4fa70;">#+attr_org:</span><span style="color: #73d216;"> :radio</span>
  <span style="color: #b4fa70;">#+NAME:</span><span style="color: #73d216;"> port</span>
  <span style="color: #8cc4ff; font-weight: bold;">- </span><span style="color: #8cc4ff; font-weight: bold;">[ ]</span><span style="color: #8cc4ff; font-weight: bold;"> localhost ::</span> 27017
  <span style="color: #888a85; font-weight: bold;">- </span><span style="color: #888a85; font-weight: bold;">[X]</span><span style="color: #888a85; font-weight: bold;"> staging ::</span><span style="color: #888a85;"> 27004</span>
  <span style="color: #8cc4ff; font-weight: bold;">- </span><span style="color: #8cc4ff; font-weight: bold;">[ ]</span><span style="color: #8cc4ff; font-weight: bold;"> production ::</span> 27005

  <span style="color: #b4fa70;">#+NAME:</span><span style="color: #73d216;"> query</span>
  <span style="color: #b4fa70;">#+BEGIN_SRC</span><span style="color: #73d216;"> mongo :db logs :host localhost :port (org-radiobutton-value "port")</span>
  <span style="background-color: #232a2b;">db.webhookLogs.find({endpoint: </span><span style="color: #e9b96e; background-color: #232a2b;">"AddCustomer"</span><span style="background-color: #232a2b;">}).sort({_id: -1}).limit(1)</span>
  <span style="color: #b4fa70;">#+END_SRC</span>
  </pre>
  </div>

  <p>
  I'm going over all of my notebooks converting all the ugly option
  hacks to this setup and it is so damn pleasing! :D
  </p>
  ]]></description>
</item>

<item>
  <title>Refiling hydra with pre-defined targets</title>
  <link>https://fuco1.github.io/2019-02-10-Refiling-hydra-with-pre-defined-targets.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2019-02-10-Refiling-hydra-with-pre-defined-targets.html</guid>
  <pubDate>Sun, 10 Feb 2019 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  I'm a heavy <code>org-capture</code> user and I use about 10 templates to save the
  ideas/tasks to appropriate places (work / life / emacs / other
  projects / reading...).  Sometimes, however, it is quite difficult to
  determine at the time of capture where to put the note, or it would
  take a lot of time to categorize properly... or sometimes I'm just
  lazy.  For these situations I use a general <code>refile.org</code> file.  Anything
  I don't want to deal with right now goes there.
  </p>

  <p>
  Then I often end up with 200+ notes in this file and I have to deal
  with it somehow during my weekly reviews.  Many items I simply delete,
  but some I refine and then refile away to where they belong.
  </p>

  <p>
  I use about 10 huge org files to store my data and simply calling
  <code>org-refile</code> is very slow and the number of targets grows into tens of
  thousands which makes the experience sub-optimal.
  </p>

  <p>
  I've written a simple Elisp <code>defmacro</code> to generate specialized versions
  of <code>org-refile</code> where I can limit the targets to one file or a subset of
  files.  This is done by <code>let</code>-binding <code>org-refine-targets</code> variable and
  then calling <code>org-refile</code>---it will pick up the new setting.  I also
  automatically clear the cache because during this process I often add
  or move headlines around and the cache is most of the time stale.  In
  practice it's not a problem because refiling to just one file is
  fast-enough to rebuild the cache on-the-go.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defmacro</span> <span style="color: #fce94f;">my-org-make-refile-command</span> <span style="color: #888a85;">(</span>fn-suffix refile-targets<span style="color: #888a85;">)</span>
  <span style="color: #e9b96e;">"Generate a command to call `</span><span style="color: #e6a8df;">org-refile</span><span style="color: #e9b96e;">' with modified targets."</span>
  `<span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> ,<span style="color: #888a85;">(</span>intern <span style="color: #888a85;">(</span>concat <span style="color: #e9b96e;">"my-org-refile-"</span> <span style="color: #888a85;">(</span>symbol-name fn-suffix<span style="color: #888a85;">)))</span> <span style="color: #888a85;">()</span>
  ,<span style="color: #888a85;">(</span>format <span style="color: #e9b96e;">"`</span><span style="color: #e6a8df;">org-refile</span><span style="color: #e9b96e;">' to %S"</span> refile-targets<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">interactive</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-refile-cache-clear<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>org-refile-target-verify-function nil<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-refile-targets ,refile-targets<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>call-interactively <span style="color: #e6a8df;">'org-refile</span><span style="color: #888a85;">))))</span>
  </pre>
  </div>

  <p>
  It's quite straight-forward, we have a <code>defun</code> skeleton and we splice
  the name and the target there.  The expansion looks like this
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">my-org-make-refile-command</span> kb '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"~/data/documents/kb.org"</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">)))</span>

  <span style="color: #73d216;">;; </span><span style="color: #73d216;">expands to</span>

  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-org-refile-kb</span> nil
  <span style="color: #e9b96e;">"`</span><span style="color: #e6a8df;">org-refile</span><span style="color: #e9b96e;">' to (quote ((\"~/data/documents/kb.org\" :maxlevel . 9)))"</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">interactive</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-refile-cache-clear<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span>
  <span style="color: #888a85;">((</span>org-refile-target-verify-function nil<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>org-refile-targets
  '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"~/data/documents/kb.org"</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">))))</span>
  <span style="color: #888a85;">(</span>call-interactively <span style="color: #e6a8df;">'org-refile</span><span style="color: #888a85;">)))</span>
  </pre>
  </div>

  <p>
  Throw in a cool <a href="https://github.com/abo-abo/hydra">hydra</a> and you're all set!
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">my-org-make-refile-command</span> kb '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"~/data/documents/kb.org"</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">my-org-make-refile-command</span> reading '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"~/org/reading.org"</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">my-org-make-refile-command</span> this-file `<span style="color: #888a85;">((</span>,<span style="color: #888a85;">(</span>buffer-file-name<span style="color: #888a85;">)</span> <span style="color: #ad7fa8;">:maxlevel</span> . 9<span style="color: #888a85;">)))</span>

  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">defhydra</span> <span style="color: #8cc4ff;">my-org-refile-hydra</span> <span style="color: #888a85;">(</span><span style="color: #ad7fa8;">:color</span> blue <span style="color: #ad7fa8;">:hint</span> nil<span style="color: #888a85;">)</span>
  <span style="color: #e9b96e;">"</span>
  <span style="color: #e9b96e;">_t_his file</span>

  <span style="color: #e9b96e;">Special files:</span>
  <span style="color: #e9b96e;">---------------------</span>
  <span style="color: #e9b96e;">_k_b.org    _r_eading.org"</span>
  <span style="color: #888a85;">(</span><span style="color: #e9b96e;">"k"</span> my-org-refile-kb<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #e9b96e;">"r"</span> my-org-refile-reading<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #e9b96e;">"t"</span> my-org-refile-this-file<span style="color: #888a85;">))</span>

  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">bind-key</span> <span style="color: #e9b96e;">"C-c r"</span> <span style="color: #8cc4ff;">#'my-org-refile-hydra/body</span> org-mode-map<span style="color: #888a85;">)</span>
  </pre>
  </div>
  ]]></description>
</item>

<item>
  <title>Org mode and google calendar sync</title>
  <link>https://fuco1.github.io/2019-02-02-Org-mode-and-google-calendar-sync.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2019-02-02-Org-mode-and-google-calendar-sync.html</guid>
  <pubDate>Sat, 02 Feb 2019 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  As a contractor working for multiple clients I juggle many projects
  and meetings all the time.  Fortunately for me, there is <a href="https://orgmode.org/">orgmode</a>.
  Unfortunately, my clients have not yet learned to appreciate its
  merits.  Fortunately though, they all use the GSuite platform from
  Google, which means agendas are planned in Google Calendars.
  </p>

  <p>
  So I finally bit the bullet and decided to integrate Google Calendar
  into my org agenda.  I didn't have to go a long way before finding
  <a href="https://github.com/kidd/org-gcal.el">org-gcal.el</a>.
  </p>

  <p>
  My setup is taken mostly from <a href="https://cestlaz.github.io/posts/using-emacs-26-gcal/">Using Emacs - 26 - Google Calendar, Org
  Agenda</a> by the amazing Mike Zamansky.  One difference from Mike's setup
  is that I'm using a single-way sync only, that is I only fetch from
  google calendar and do not publish anything.
  </p>

  <p>
  The reason is that I use multiple calendars (I basically have a google
  account at every company I work for plus a personal calendar) and the
  workflow with events and inviting myself from one calendar to another
  as attendees is too complex and fragile to trust some automated tool.
  And I can not afford my calendars to break.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">use-package</span> <span style="color: #e6a8df;">org-gcal</span>
  <span style="color: #ad7fa8;">:after</span> org
  <span style="color: #ad7fa8;">:config</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> org-gcal-client-id <span style="color: #e9b96e;">"781554523097-ocjovnfpqgtpoc4qv7ubr8c679t96bv7.apps.googleusercontent.com"</span>
  org-gcal-client-secret <span style="color: #e9b96e;">"&lt;&lt;gcal-secret&gt;&gt;"</span>
  org-gcal-file-alist '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"matus.goljer@gmail.com"</span> . <span style="color: #e9b96e;">"~/org/gcal.org"</span><span style="color: #888a85;">))</span>
  org-gcal-header-alist '<span style="color: #888a85;">((</span><span style="color: #e9b96e;">"matus.goljer@gmail.com"</span> . <span style="color: #e9b96e;">"#+PROPERTY: TIMELINE_FACE \"pink\"\n"</span><span style="color: #888a85;">))</span>
  org-gcal-auto-archive nil
  org-gcal-notify-p nil<span style="color: #888a85;">)</span>

  <span style="color: #888a85;">(</span>add-hook <span style="color: #e6a8df;">'org-agenda-mode-hook</span> <span style="color: #e6a8df;">'org-gcal-fetch</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>add-hook <span style="color: #e6a8df;">'org-capture-after-finalize-hook</span> <span style="color: #e6a8df;">'org-gcal-fetch</span><span style="color: #888a85;">))</span>
  </pre>
  </div>

  <p>
  I'm also using <a href="https://github.com/Fuco1/org-timeline">org-timeline</a> so I add some extra header arguments to
  the generated file to add a different color to the Google Calendar
  entries.
  </p>
  ]]></description>
</item>

<item>
  <title>Use the input method from original org buffer in log note buffer</title>
  <link>https://fuco1.github.io/2019-01-23-Use-the-input-method-from-original-org-buffer-in-log-note-buffer.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2019-01-23-Use-the-input-method-from-original-org-buffer-in-log-note-buffer.html</guid>
  <pubDate>Wed, 23 Jan 2019 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  On switching various TODO states I've set up org mode to pop a buffer
  for <a href="https://orgmode.org/manual/Tracking-TODO-state-changes.html">attaching a quick note or explanation</a>.  You can do this also for
  refiling, clocking in or out, rescheduling and so on.
  </p>

  <p>
  I don't use these logs very often in a review or retrospective but it
  helped me a bunch of times to figure out the circumstances of my past
  actions (e.g. rescheduling, postponing work etc.) so I find it worth
  to spend 30 seconds jotting down a simple note as opposed to then
  trying to figure out everything from scratch for hours.
  </p>

  <p>
  Especially useful for when you are not meeting client's
  deadlines. Papertrail is good!
  </p>

  <p>
  Also being a daily journalist and somewhat obsessive about tracking my
  life my settings here are pretty aggressive.
  </p>

  <p>
  One thing that buggs me is, being not a native English speaker, is
  that when <code>org-mode</code> pops the note buffer its input method resets to
  English.  Given the fact that the past and current org maintainers
  also don't speak English as a first language kind of led me to expect
  there to be some setting to inherit the input method of the original
  buffer<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>.  Sadly, I
  couldn't find it, so I decided to "roll my own".
  </p>

  <p>
  Now here comes the part that blew my mind... I've realized I wrote the
  whole code in under 2 minutes... where simply trying to read the
  manual and search the code would easily take more
  time<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup>.  This is the nice feature of being an Emacs power-user.  I
  wrote the code on the first try, registered it in a hook which name
  I've guessed and it all worked flawlessly.  Nice!
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-org-inherit-input-method</span> <span style="color: #888a85;">()</span>
  <span style="color: #e9b96e;">"Set the input method of this buffer to that of original's buffer."</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let*</span> <span style="color: #888a85;">((</span>note-buffer <span style="color: #888a85;">(</span>marker-buffer org-log-note-marker<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>im <span style="color: #888a85;">(</span><span style="color: #b4fa70;">with-current-buffer</span> note-buffer
  current-input-method<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span>set-input-method im<span style="color: #888a85;">)))</span>

  <span style="color: #888a85;">(</span>add-hook <span style="color: #e6a8df;">'org-log-buffer-setup-hook</span> <span style="color: #e6a8df;">'my-org-inherit-input-method</span><span style="color: #888a85;">)</span>
  </pre>
  </div>

  <p>
  Of course, I've spent thousands of hours learning Elisp, so I'm not
  sure where or when the time/productivity curves actually crossed.
  </p>
  ]]></description>
</item>

<item>
  <title>Make agenda clockreport respect =org-extend-today-until=</title>
  <link>https://fuco1.github.io/2019-01-03-Make-agenda-clockreport-respect-=org-extend-today-until=.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2019-01-03-Make-agenda-clockreport-respect-=org-extend-today-until=.html</guid>
  <pubDate>Thu, 03 Jan 2019 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  There's a cool but little known <a href="https://orgmode.org/">org-mode</a> setting for all the the night
  owls out there called <code>org-extend-today-until</code>.  It does quite what you
  would expect: you can tell org-mode when your "logical" midnight is.
  For me, I rarely go to sleep before 12 pm so I set it to 4 am just to
  be sure.  This way even if it's already 0:15 and I refresh the agenda
  view it still displays "yesterday".
  </p>

  <p>
  The trouble is that not a lot of org mode actually respects this
  setting, so far the only things mentioned in the docstring are the
  agenda day switch and something related to reading dates from the user
  (I think through <code>C-c .</code>) but I can't see any difference in that.  If
  you are using the org modeline and summary clock for today's time
  spent on a task this will also only count contributions from the
  specified hour which is nice.  There is probably more but I haven't
  noticed yet.
  </p>

  <p>
  Since I'm an <code>org-agenda-clockreport-mode</code> I want to have that
  consistent with the modeline information.  However it goes through
  entirely different machinery and so the easiest extension point is
  simply put an advice on the function which collects the data
  (<code>org-clock-get-table-data</code>) and in case we are working in the agenda
  scope adjust the <code>:tstart</code> and <code>:tend</code> properties to respect
  <code>org-extend-today-until</code>.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-convert-org-today-to-timestamp</span> <span style="color: #888a85;">(</span>ts<span style="color: #888a85;">)</span>
  <span style="color: #e9b96e;">"Convert TS to timestamp.</span>

  <span style="color: #e9b96e;">TS is an absolute number of days since 0001-12-31bce</span>

  <span style="color: #e9b96e;">The timestamp returned is in the format YYYY-MM-DD hh:mm.  The</span>
  <span style="color: #e9b96e;">hour is adjusted according to `</span><span style="color: #e6a8df;">org-extend-today-until</span><span style="color: #e9b96e;">'."</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>ts-greg <span style="color: #888a85;">(</span>calendar-gregorian-from-absolute ts<span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span>format <span style="color: #e9b96e;">"%4d-%02d-%02d %02d:00"</span>
  <span style="color: #888a85;">(</span>nth 2 ts-greg<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>car ts-greg<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>nth 1 ts-greg<span style="color: #888a85;">)</span>
  org-extend-today-until<span style="color: #888a85;">)))</span>

  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">defun</span> <span style="color: #fce94f;">my-org-clock-get-table-data-adjust-start</span> <span style="color: #888a85;">(</span>origfun file params<span style="color: #888a85;">)</span>
  <span style="color: #e9b96e;">"Adjust the start and end arguments to respect `</span><span style="color: #e6a8df;">org-extend-today-until</span><span style="color: #e9b96e;">'."</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">when</span> <span style="color: #888a85;">(</span><span style="color: #b4fa70;">and</span> <span style="color: #888a85;">(</span>eq <span style="color: #888a85;">(</span>plist-get params <span style="color: #ad7fa8;">:scope</span><span style="color: #888a85;">)</span> <span style="color: #e6a8df;">'agenda</span><span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>integerp <span style="color: #888a85;">(</span>plist-get params <span style="color: #ad7fa8;">:tstart</span><span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>ts <span style="color: #888a85;">(</span>my-convert-org-today-to-timestamp <span style="color: #888a85;">(</span>plist-get params <span style="color: #ad7fa8;">:tstart</span><span style="color: #888a85;">)))</span>
  <span style="color: #888a85;">(</span>te <span style="color: #888a85;">(</span>my-convert-org-today-to-timestamp <span style="color: #888a85;">(</span>plist-get params <span style="color: #ad7fa8;">:tend</span><span style="color: #888a85;">))))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> params <span style="color: #888a85;">(</span>plist-put params <span style="color: #ad7fa8;">:tstart</span> ts<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">setq</span> params <span style="color: #888a85;">(</span>plist-put params <span style="color: #ad7fa8;">:tend</span> te<span style="color: #888a85;">))))</span>
  <span style="color: #888a85;">(</span>funcall origfun file params<span style="color: #888a85;">))</span>

  <span style="color: #888a85;">(</span>advice-add <span style="color: #e6a8df;">'org-clock-get-table-data</span> <span style="color: #ad7fa8;">:around</span> <span style="color: #8cc4ff;">#'my-org-clock-get-table-data-adjust-start</span><span style="color: #888a85;">)</span>
  </pre>
  </div>

  <p>
  Recently I've been adding some nice improvements to my <a href="https://github.com/Fuco1/org-timeline">org-timeline</a>
  package which draws a visual representation of all the
  scheduled/clocked items (see README for visuals).  I'll make sure it
  respects this setting as well.  So far I've instinctively set it to
  start drawing at 5:00.
  </p>
  ]]></description>
</item>

<item>
  <title>Multiline fontification with org-emphasis-alist</title>
  <link>https://fuco1.github.io/2018-12-23-Multiline-fontification-with-org-emphasis-alist.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2018-12-23-Multiline-fontification-with-org-emphasis-alist.html</guid>
  <pubDate>Sun, 23 Dec 2018 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  By default org mode only fontifies spans of text wrapped in emphasis
  markers (customized with <code>org-emphasis-alist</code>) if they extend through at
  most one newline.  This is probably a performance optimization, one
  wholly unnecessary on modern hardware.
  </p>

  <p>
  As per this <a href="https://emacs.stackexchange.com/questions/18101/org-mode-multi-line-emphasis-and-bold">stack overflow</a> post I re-set the constant to 10 lines and
  can probably even increase it if necessary.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span>setcar <span style="color: #888a85;">(</span>nthcdr 4 org-emphasis-regexp-components<span style="color: #888a85;">)</span> 10<span style="color: #888a85;">)</span>
  </pre>
  </div>

  <p>
  Before this starts to work you need to re-save <code>org-emphasis-alist</code>
  through the customize interface because it is using a custom setter
  <code>org-set-emph-re</code> to compute the regexpses (or, <i><b>gulp</b></i>, restart Emacs).
  </p>

  <p>
  Here I quote the answer in case it ever gets lost:
  </p>

  <div class="org-src-container">
  <pre class="src src-markdown">By default, org-mode allows a single newline. So if you want to be
  able to add markup to text that spans more than two consecutive lines,
  you'll need to modify this entry.

  <span style="color: #e6a8df; background-color: #232a2b;">    (setcar (nthcdr 4 org-emphasis-regexp-components) N)</span>

  ... where N is the number of newlines you want to allow.
  </pre>
  </div>
  ]]></description>
</item>

<item>
  <title>WAR STORY: When turning to the profiler turns out to be a good call</title>
  <link>https://fuco1.github.io/2018-08-12-WAR-STORY:-When-turning-to-the-profiler-turns-out-to-be-a-good-call.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2018-08-12-WAR-STORY:-When-turning-to-the-profiler-turns-out-to-be-a-good-call.html</guid>
  <pubDate>Sun, 12 Aug 2018 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  Some of you might have seen the little bit of news circulating around
  about my new project.  It's called <a href="https://github.com/Fuco1/Elsa">Elsa</a> (stands for Emacs Lisp Static
  Analyzer), which is exactly what you would expect: you throw it some
  Elisp code and it analyzes the types, dead code, style and all sorts
  of other rules (stars are the limit!).
  </p>

  <p>
  I've been working on this "secretly" in public (the repo was on Github
  from day 1.) for about a year and very early on I've made a couple
  decisions that I now thought doomed me to failure.  These were:
  </p>

  <ul class="org-ul">
  <li>I will use <a href="https://www.gnu.org/s/emacs/manual/html_node/eieio/">EIEIO</a> to represent the reader forms and types</li>
  <li>I will use CL <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Generic-Functions.html">generics</a> to process these objects</li>
  </ul>

  <p>
  For this kind of a problem where we are walking some recursive
  structure and then doing some "arithmetics" on hierarchies of types,
  classes and methods are a very natural choice.  You can write generic
  implementations and then "pattern match" on specific classes to
  provide more elaborate strategies.
  </p>

  <p>
  These two were notoriously known for having very bad performance in
  the past, but nonetheless I decided that the simplicity of the
  implementation has higher priority for me now and that in the worst
  case I can transform it into a manual-dispatch-conds-and-defuns later.
  </p>

  <p>
  EIEIO in particular was also known to be quite undebuggable.  They did
  a good job on it with the 25 release and the error messages are now
  pretty helpful.  It's no worse than the rest of Emacs (<code>M-x
  faint-praise</code>).
  </p>

  <p>
  When I finally finished the reader module which turns the source file
  into a tree of EIEIO objects, to my horror I found out that it was
  indeed slow. <b>Way slow</b>. I was using <a href="https://github.com/Fuco1/smartparens/blob/master/smartparens.el">smartparens.el</a> as a benchmark: it's
  a single lisp file package of about 10000 lines with enough complexity
  to inhibit most of the features of Elisp.
  </p>

  <p>
  It took 42 seconds to analyze.  That is not great when you want to use
  it with something like <a href="http://www.flycheck.org/en/latest/">flycheck</a>.  So I'm pretty much thinking I'm
  screwed at this point and begin thinking about how to get rid of the
  generics, because obviously <i>that</i> must be the issue, right?
  </p>

  <p>
  Oh, how wrong I was.  Finally in a stroke of genius I fired up an
  <code>emacs -nw -q</code>, loaded all the necessary things and did <code>M-x
  profiler-start</code>.
  </p>

  <p>
  Then I run the analysis in that instance, get the report and get my
  mind blown to pieces: the culprit was the little innocent looking
  function <code>line-number-at-pos</code>.  The reader spent about 90% of all the
  time inside that function.
  </p>

  <p>
  What happened?  Every time I read any form I need to remember the line
  and column it was encountered at for error reporting to the user
  later.  So every time I read anything (a symbol, a list, a keyword, a
  string) I would call <code>line-number-at-pos</code> with the token's start
  position to get the line number.
  </p>

  <p>
  What this function does is it jumps to the first line of the file,
  then regexp searches for <code>\n</code> until it reaches the <code>point</code> from which it
  was called.
  </p>

  <p>
  So you can imagine, in your source code on line <code>8500</code>, a form like
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span>very innocent looking form at line 8500<span style="color: #888a85;">)</span>
  </pre>
  </div>

  <p>
  would trigger 8 calls to <code>line-number-at-pos</code> which would in turn do
  68000 regexp searches for <code>\n</code>.  The total number of these went way up
  in the lower hundreds of millions, somewhere around the marks of 400
  to 500 million calls.  Now that's <i>a lot</i> of completely useless
  computation.
  </p>

  <p>
  So what I did to fix this?  At the beginning of the analysis I run
  through all the lines and place a text property <code>elsa-line</code> on the first
  character with the line number.
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span>goto-char <span style="color: #888a85;">(</span>point-min<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">let</span> <span style="color: #888a85;">((</span>line 1<span style="color: #888a85;">))</span>
  <span style="color: #888a85;">(</span>put-text-property <span style="color: #888a85;">(</span>point<span style="color: #888a85;">)</span> <span style="color: #888a85;">(</span>1+ <span style="color: #888a85;">(</span>point<span style="color: #888a85;">))</span> <span style="color: #e6a8df;">'elsa-line</span> line<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">while</span> <span style="color: #888a85;">(</span>= <span style="color: #888a85;">(</span>forward-line<span style="color: #888a85;">)</span> 0<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span><span style="color: #b4fa70;">cl-incf</span> line<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>put-text-property <span style="color: #888a85;">(</span>point<span style="color: #888a85;">)</span> <span style="color: #888a85;">(</span>min
  <span style="color: #888a85;">(</span>buffer-size<span style="color: #888a85;">)</span>
  <span style="color: #888a85;">(</span>1+ <span style="color: #888a85;">(</span>point<span style="color: #888a85;">)))</span> <span style="color: #e6a8df;">'elsa-line</span> line<span style="color: #888a85;">)))</span>
  </pre>
  </div>

  <p>
  Then to get the line number all I need to do is
  </p>

  <div class="org-src-container">
  <pre class="src src-elisp"><span style="color: #888a85;">(</span>get-text-property <span style="color: #888a85;">(</span>line-beginning-position<span style="color: #888a85;">)</span> <span style="color: #e6a8df;">'elsa-line</span><span style="color: #888a85;">)</span>
  </pre>
  </div>

  <p>
  Because the text properties use efficient data structures this access
  is really really fast (something like <code>O(log n)</code> in length of buffer).
  </p>

  <p>
  With this little change, the analysis time dropped to 5 seconds,
  almost a factor of 10!  So the moral of the story is, as has been
  repeated to death, when in trouble always bring out the big guns:
  profilers are our friends!  No way in the world I would've guessed
  this function was responsible (I actually started changing a bunch of
  code into <code>defsubst</code> and inlining code before I figured that's
  completely bonkers).
  </p>

  <p>
  On a closing note, I'm looking for people to help out on the project,
  there is a lot of things for people of all skill ranging from
  beginners to seasoned hackers.  Check out issues marked <a href="https://github.com/Fuco1/Elsa/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22">help wanted</a> or
  <a href="https://github.com/Fuco1/Elsa/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22">good first issue</a> and get involved!  If anything's unclear go ahead and
  ask questions.
  </p>
  ]]></description>
</item>

<item>
  <title>fontify-face: Fontification of symbols referencing faces</title>
  <link>https://fuco1.github.io/2018-04-10-fontify-face:-Fontification-of-symbols-referencing-faces.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2018-04-10-fontify-face:-Fontification-of-symbols-referencing-faces.html</guid>
  <pubDate>Tue, 10 Apr 2018 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  Today I was updating <a href="https://github.com/Fuco1/.emacs.d/tree/master/themes">my theme</a> to support some additional packages.
  I'm a big fan of face inheritance because it makes things very
  consistent across the board.  In particular I'm trying to reuse the
  faces in the <code>font-lock-</code> group as much as possible.
  </p>

  <p>
  I have even created a similar hierarchy for the various markup systems
  such as markdown, org mode, rst, textile, latex and others.  It's
  called, unsurprisingly, <code>markup</code> and contains all the common elements
  such as headers, code text, emphasis and so on.  I then make all the
  other modes inherit from this set of faces and thus achieve a
  consistent look and feel across all the markup
  modes.<sup><a id="fnr.4" class="footref" href="#fn.4">4</a></sup>.  Have a look at the definitions if this
  makes no sense to you yet!
  </p>

  <p>
  Anyway, while I was working on adding new faces I got annoyed because
  I couldn't see what I was doing.  I sometimes inherit from multiple
  faces to make combined faces, sometimes I just add a parameter or two
  and it's difficult to see the results. Usually you need to switch to a
  different buffer (with the mode you are theming), find the desired
  element and look what's going on.
  </p>

  <p>
  Why couldn't the face name itself be fontified with the face? A ha!  I
  already use <a href="https://elpa.gnu.org/packages/rainbow-mode.html">rainbow-mode</a> which colorizes color references such as
  #fafafa with the color they represent.  So I'm thinking along the same
  lines: the symbols representing faces should be fontified with that
  face.  This will make the feedback loop much shorter and the
  development much faster and more convenient.
  </p>

  <p>
  I have quickly turned this idea into a package and called it
  <a href="https://github.com/Fuco1/fontify-face">fontify-face</a>.  The code is rather unsurprising, just a couple lines.
  The most interesting part is the function
  <code>fontify-face-colorize-matched-face</code> which computes the face from the
  matched region and then passes it back to font-lock to do its thing.
  </p>

  <p>
  This works because font-lock allows arbitrary forms in every place
  where you can pass a face reference.  The rule is, this form must
  evaluate to
  </p>

  <ul class="org-ul">
  <li>a face reference,</li>
  <li>or a plist representing face properties,</li>
  <li>or nil if we don't want do do anything with the match.</li>
  </ul>

  <p>
  The form I use is <code>(funcall 'fontify-face-colorize-matched-face)</code>
  because I dislike just passing random blobs of code around.  This way
  I can redefine the function without having to mess around with
  removing the old forms from <code>font-lock-keywords-alist</code>.  This is similar
  in logic to why you shouldn't put lambda forms in hooks.
  </p>

  <p>
  So that's it folks.  Finally, here are some pictures:
  </p>


  <div class="figure">
  <p><img src="https://i.imgur.com/hjJQVyL.png" alt="hjJQVyL.png" />
  </p>
  <p><span class="figure-number">Figure 1: </span>magit and friends</p>
  </div>


  <div class="figure">
  <p><img src="https://i.imgur.com/1ksWpt3.png" alt="1ksWpt3.png" />
  </p>
  <p><span class="figure-number">Figure 2: </span>markup faces</p>
  </div>
  ]]></description>
</item>

<item>
  <title>Smartparens is 5 years old today</title>
  <link>https://fuco1.github.io/2017-11-17-Smartparens-is-5-years-old-today.html</link>
  <author>matus.goljer@gmail.com (Matúš Goljer)</author>
  <guid isPermaLink="false">https://fuco1.github.io/2017-11-17-Smartparens-is-5-years-old-today.html</guid>
  <pubDate>Fri, 17 Nov 2017 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  Five years ago I've published the <a href="https://github.com/Fuco1/smartparens/commit/cf39349e1966d20ce0c9f370d7310500d5da1637">first version</a> of Smartparens on
  Github.  To celebrate the occasion I've just released Smartparens
  version <a href="https://github.com/Fuco1/smartparens/releases/tag/1.11.0">1.11.0</a> packed with new features, bug fixes and some
  performance optimizations.
  </p>

  <p>
  This project has become a huge part of my life and evolved along with
  me over the years.  I have started working on it pretty much on the
  day when I first started using Emacs.  One can almost say that the
  project was only born thanks to my ignorance of Emacs landscape---had
  I known of paredit I would have probably never started, or maybe start
  but a lot later and with different setup in mind.
  </p>

  <p>
  Today with over 350.000 downloads on MELPA it is one of the biggest
  projects in Emacs land; and I'm aiming for the top!  The ubiquity of
  it still shocks me and every time I randomly read a blog post or an
  article where someone mentions Smartparens it feels just like years
  ago---a sense of deep appreciation and gratefulness, not only for the
  kind words but also simply for the fact that I am able to do something
  like this and can rightly call myself amazingly fortunate.
  </p>

  <p>
  I had no idea what I was doing but the response from the community was
  amazing and very encouraging.  One special shout out has to go to the
  amazing <a href="http://batsov.com/">Bozhidar Batsov</a> who <a href="https://twitter.com/bbatsov/status/350889256048279553?lang=en">switched Prelude</a> to use Smartparens not
  even half a year after I started the project.  This was a huge deal
  for the growth of the project with thousands of new users coming in
  pretty much over night.
  </p>

  <p>
  This early success encouraged me to start other (Emacs) projects of
  which I now have well over 50 and I have contributed to countless
  others.
  </p>

  <p>
  Thanks also go to all the <a href="https://github.com/Fuco1/smartparens/graphs/contributors">contributors</a> who helped to move Smartparens
  to where it is now; and also many others who reported issues and
  provided suggestions for improvements.  I can't name you all but your
  efforts are much appreciated!
  </p>

  <p>
  I had pretty rough and packed year but I hope to get back on track
  with the release schedule and start a more rapid release cycle.
  Expect more goodies to come soon :)
  </p>

  <p>
  Thanks again and enjoy the new release everyone!
  </p>

  <p>
  ----
  </p>

  <p>
  PS: You can send some love through <a href="https://www.patreon.com/user?u=3282358&amp;ty=h">Patreon</a> or <a href="https://www.paypal.me/MatusGoljer">PayPal</a>.
  </p>
  ]]></description>
</item>
<div id="footnotes">
  <h2 class="footnotes">Footnotes: </h2>
  <div id="text-footnotes">

    <div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">While it is possible to restrict to a
    region from the org-agenda speed dial, I find it quite impractical and
    prefer to do the restrictions from the project's buffer</p></div></div>

    <div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">And really, 99% of the time, when you say "I'm
    going to write an org-extension", it already is in core.</p></div></div>

    <div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">This is not the greatest engineering and you
    should almost always prefer a well-tested lib over your own... on the
    other hand, being a pragmatic professional, I value my time over code
    purity</p></div></div>

    <div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4">4</a></sup> <div class="footpara"><p class="footpara">I might somehow package this in the future
    but haven't found a good way to plug this into existing themes.  If
    you have ideas let me know!</p></div></div>


  </div>
</div></channel>
</rss>
